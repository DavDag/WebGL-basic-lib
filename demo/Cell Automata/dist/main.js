/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webgl-basic-lib */ \"../../lib/all.js\");\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./main.js */ \"./src/main.js\");\n\r\n\r\n\r\n\r\nfunction onload() {\r\n  try {\r\n    const gl = (0,webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.RetrieveWebGLContext)(\"main-canvas\");\r\n    (0,webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.SetOnClickHandler)(\"main-canvas\", _main_js__WEBPACK_IMPORTED_MODULE_1__.mouseHandler);\r\n    (0,webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.SetKeyboardListener)(\"main-canvas\", _main_js__WEBPACK_IMPORTED_MODULE_1__.keyboardHandler);\r\n    (0,_main_js__WEBPACK_IMPORTED_MODULE_1__.main)(gl);\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\nwindow.onload = onload;\r\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"keyboardHandler\": () => (/* binding */ keyboardHandler),\n/* harmony export */   \"main\": () => (/* binding */ main),\n/* harmony export */   \"mouseHandler\": () => (/* binding */ mouseHandler)\n/* harmony export */ });\n/* harmony import */ var webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webgl-basic-lib */ \"../../lib/all.js\");\n/* harmony import */ var _shaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders.js */ \"./src/shaders.js\");\n\r\n\r\n\r\n\r\nconst S = 512;\r\nconst N = 256;\r\n\r\nvar isRunning = true;\r\nvar gl = null;\r\nvar textDiv = null;\r\n\r\nconst quad = {\r\n  v: new Float32Array([\r\n    -1, -1, 0, 1,\r\n    -1,  1, 0, 0,\r\n     1, -1, 1, 1,\r\n     1,  1, 1, 0,\r\n  ]),\r\n  i: new Uint8Array([\r\n    0, 1, 2,\r\n    1, 2, 3\r\n  ]),\r\n};\r\n\r\nfunction mmap(v) {\r\n  const tmp = v.clone();\r\n  tmp.div(S / 2).add(webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Vec2.All(-1));\r\n  tmp.y *= -1;\r\n  return tmp.toVec4(0, 1).transform(camera.inv()).toVec2();\r\n}\r\n\r\nfunction grid(v) {\r\n  const tmp = v.clone();\r\n  tmp.add(webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Vec2.All(1)).div(2).mul(N).floor();\r\n  tmp.y = Math.min(Math.max(tmp.y, 0), N-1);\r\n  tmp.x = Math.min(Math.max(tmp.x, 0), N-1);\r\n  return tmp;\r\n}\r\n\r\nfunction bbox (v) {\r\n  const tmp = v.clone();\r\n  return (\r\n       tmp.x <= 1 && tmp.x >= -1\r\n    && tmp.y <= 1 && tmp.y >= -1\r\n  );\r\n}\r\n\r\nconst camera = {\r\n  mat: null,\r\n  invMat: null,\r\n  updated: false,\r\n  zoom: 0.5,\r\n  pos: webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Vec2.Zeros(),\r\n  update: function() {\r\n    if (!this.updated) {\r\n      this.updated = true;\r\n      this.mat = webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Mat4.Identity()\r\n        .translate(this.pos.toVec3(0))\r\n        .scale(new webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Vec3(this.zoom, this.zoom, 1))\r\n      ;\r\n      this.invMat = this.mat.clone().inverse();\r\n    }\r\n  },\r\n  curr: function () {\r\n    this.update();\r\n    return this.mat;\r\n  },\r\n  inv: function () {\r\n    this.update();\r\n    return this.invMat;\r\n  },\r\n  updatePos: function (delta) {\r\n    this.updated = false;\r\n    this.pos.add(delta);\r\n  },\r\n  updateZoom: function (delta, pos) {\r\n    this.updated = false;\r\n    const lastZoom = this.zoom;\r\n    this.zoom *= Math.pow(Math.pow(2, 0.5), delta);\r\n    this.zoom = Math.min(Math.max(0.5, this.zoom), (N / S) / (16 / S));\r\n    const factor = this.zoom / lastZoom;\r\n    pos.div(S / 2).add(webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Vec2.All(-1));\r\n    pos.y *= -1;\r\n    this.pos.x = pos.x - (pos.x - this.pos.x) * factor;\r\n    this.pos.y = pos.y - (pos.y - this.pos.y) * factor;\r\n  },\r\n};\r\n\r\nconst mouseHandler = {\r\n  isDragging: false,\r\n  isDrawing: false,\r\n  lastPos: null,\r\n  lastCell: null,\r\n  onMouseDown: function (event, pos) {\r\n    // Left\r\n    if (event.button == 0) {\r\n      const tmp = mmap(pos);\r\n      if (bbox(tmp)) {\r\n        this.isDrawing = true;\r\n        const cell = grid(tmp);\r\n        this.lastCell = cell.clone();\r\n      }\r\n    }\r\n    // Middle\r\n    if (event.button == 1) {\r\n      this.isDragging = true;\r\n      this.lastPos = pos.clone();\r\n    }\r\n  },\r\n  onMouseMove: function (event, pos) {\r\n    if (this.isDragging) {\r\n      const delta = pos.clone().sub(this.lastPos).div(S / 2);\r\n      delta.y *= -1;\r\n      this.lastPos = pos.clone();\r\n      camera.updatePos(delta);\r\n    }\r\n    if (this.isDrawing) {\r\n      const tmp = mmap(pos);\r\n      if (bbox(tmp)) {\r\n        const cell = grid(tmp);\r\n        this.lastCell = cell.clone();\r\n        updateTexture(this.lastCell);\r\n      }\r\n    }\r\n  },\r\n  onMouseUp: function (event, pos) {\r\n    // Left\r\n    if (event.button == 0) {\r\n      this.isDrawing = false;\r\n      const tmp = mmap(pos);\r\n      if (bbox(tmp)) {\r\n        const cell = grid(tmp);\r\n        this.lastCell = cell.clone();\r\n        updateTexture(this.lastCell);\r\n      }\r\n    }\r\n    // Middle\r\n    if (event.button == 1) {\r\n      this.isDragging = false;\r\n    }\r\n  },\r\n  onMouseWheel: function (event, pos) {\r\n    const delta = (event.deltaY / 100) * -1;\r\n    camera.updateZoom(delta, pos);\r\n  },\r\n  onMouseOut: function (event) {\r\n    this.isDragging = false;\r\n    this.isDrawing = false;\r\n  }\r\n};\r\n\r\nconst keyboardHandler = {\r\n  OnKeyDown: function (event) {\r\n\r\n  },\r\n  OnKeyUp: function (event) {\r\n    if (event.code == \"Space\") {\r\n      isRunning = !isRunning;\r\n      if (isRunning) {\r\n        textDiv.innerText = \"Press \\\"Space\\\" to Pause/Resume simulation\";\r\n      } else {\r\n        textDiv.innerText = \"Paused\";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst texture = {\r\n  idA: null,\r\n  idB: null,\r\n  create: function () {\r\n    this.idA = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, this.idA);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, N, N, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    \r\n    this.idB = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, this.idB);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, N, N, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n  },\r\n  ind: 0,\r\n  swap: function () {\r\n    ++this.ind;\r\n  },\r\n  curr: function () {\r\n    return (this.ind % 2 == 0) ? this.idA : this.idB;\r\n  },\r\n  next: function () {\r\n    return (this.ind % 2 == 0) ? this.idB : this.idA;\r\n  }\r\n}\r\n\r\nconst cellsToUpdate = [];\r\nfunction updateTexture(cell) {\r\n  cellsToUpdate.push(cell);\r\n  // console.log(\"Added: \", cell.toString(0));\r\n}\r\n\r\nfunction main(ctx) {\r\n  textDiv = document.getElementById(\"overlay-text\");\r\n\r\n  gl = ctx;\r\n  \r\n  const [simProgram, resProgram] = (0,_shaders_js__WEBPACK_IMPORTED_MODULE_1__.programs)(gl);\r\n  simProgram.attributes([\r\n    [\"aPos\", 2, gl.FLOAT, 16, 0],\r\n    [\"aTex\", 2, gl.FLOAT, 16, 8]\r\n  ]);\r\n  resProgram.attributes([\r\n    [\"aPos\", 2, gl.FLOAT, 16, 0],\r\n    [\"aTex\", 2, gl.FLOAT, 16, 8]\r\n  ]);\r\n  simProgram.declareUniforms([\r\n    [\"uMatrix\", \"Matrix4fv\"],\r\n    [\"uSize\", \"1f\"],\r\n    [\"uTexture\", \"1i\"],\r\n  ]);\r\n  resProgram.declareUniforms([\r\n    [\"uMatrix\", \"Matrix4fv\"],\r\n    [\"uSize\", \"1f\"],\r\n    [\"uTexture\", \"1i\"],\r\n  ]);\r\n\r\n  const vba = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, vba);\r\n  gl.bufferData(gl.ARRAY_BUFFER, quad.v, gl.STATIC_DRAW);\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n  const vbo = gl.createBuffer();\r\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vbo);\r\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, quad.i, gl.STATIC_DRAW);\r\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n  texture.create();\r\n  const framebuffer = gl.createFramebuffer();\r\n  \r\n  simProgram.use();\r\n  simProgram.uSize.update(N);\r\n  resProgram.use();\r\n  resProgram.uSize.update(N);\r\n  webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Program.unbind(gl);\r\n\r\n  function draw() {\r\n    if (cellsToUpdate.length > 0) {      \r\n      const pixels = new Uint8Array([255, 255, 255, 255]);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.curr());\r\n      cellsToUpdate.forEach((cell) => {\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, cell.x, cell.y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n      })\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.next());\r\n      cellsToUpdate.forEach((cell) => {\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, cell.x, cell.y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n      })\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n      cellsToUpdate.splice(0, cellsToUpdate.length);\r\n    }\r\n    if (isRunning) {\r\n      gl.viewport(0, 0, N, N);\r\n      \r\n      gl.clearColor(0, 0, 0, 1);\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      \r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture.next(), 0);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.curr());\r\n      \r\n      gl.bindBuffer(gl.ARRAY_BUFFER, vba);\r\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vbo);\r\n      simProgram.use();\r\n\r\n      const mat = webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Mat4.Identity();\r\n      mat.scale(new webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Vec3(1, -1, 1));\r\n\r\n      simProgram.uMatrix.update(mat.values);\r\n      simProgram.uTexture.update(texture.curr());\r\n      simProgram.enableAttributes();\r\n      \r\n      gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);\r\n      \r\n      simProgram.disableAttributes();\r\n      webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Program.unbind(gl);\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n      \r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n      texture.swap();\r\n    }\r\n    {\r\n      gl.viewport(0, 0, S, S);\r\n\r\n      gl.clearColor(0.3, 0.3, 0.3, 1);\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      \r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.curr());\r\n\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, vba);\r\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vbo);\r\n      resProgram.use();\r\n      resProgram.uTexture.update(texture.curr());\r\n      \r\n      const mat = webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Mat4.Identity();\r\n      mat.apply(camera.curr());\r\n      mat.scale(new webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Vec3(1, -1, 1));\r\n\r\n      resProgram.uMatrix.update(mat.values);\r\n      resProgram.enableAttributes();\r\n      \r\n      gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);\r\n      \r\n      resProgram.disableAttributes();\r\n      webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Program.unbind(gl);\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n      \r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n  }\r\n  \r\n  const interval = setInterval(() => {\r\n    window.requestAnimationFrame(() => {\r\n      try {\r\n        draw()\r\n      } catch(e) {\r\n        console.error(e);\r\n        clearInterval(interval);\r\n      }\r\n    });\r\n  }, 30);\r\n}\r\n\n\n//# sourceURL=webpack:///./src/main.js?");

/***/ }),

/***/ "./src/shaders.js":
/*!************************!*\
  !*** ./src/shaders.js ***!
  \************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"programs\": () => (/* binding */ programs)\n/* harmony export */ });\n/* harmony import */ var webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webgl-basic-lib */ \"../../lib/all.js\");\n\r\n\r\nconst VSOURCE1 = \r\n`\r\nprecision mediump float;\r\nattribute vec2 aPos;\r\nattribute vec2 aTex;\r\nuniform mat4 uMatrix;\r\nuniform float uSize;\r\nvarying vec2 vTex;\r\nvoid main() {\r\n  vTex = aTex;\r\n  gl_Position = uMatrix * vec4(aPos, 0, 1);\r\n}\r\n`;\r\n\r\nconst FSOURCE1 = \r\n`\r\nprecision mediump float;\r\nuniform float uSize;\r\nuniform sampler2D uTexture;\r\nvarying vec2 vTex;\r\nvoid main() {\r\n  int x = int(floor(vTex.x * uSize));\r\n  int y = int(floor(vTex.y * uSize));\r\n  vec2 coord = vec2(x, y) / uSize;\r\n  vec4 col = texture2D(uTexture, coord);\r\n\r\n  float total = 0.0;\r\n  for (int dx = -1; dx <= 1; dx += 1) {\r\n    if ((x + dx) >= int(uSize) || (x + dx) < 0) continue;\r\n    for (int dy = -1; dy <= 1; dy += 1) {\r\n      if ((y + dy) >= int(uSize) || (y + dy) < 0) continue;\r\n      vec4 neighbor = texture2D(uTexture, coord + vec2(dx, dy) / uSize);\r\n      if (neighbor.r == 1.0) {\r\n        total += 1.0;\r\n      }\r\n    }\r\n  }\r\n\r\n  vec4 alive = vec4(1, 1, 1, 1);\r\n  vec4 dead = vec4(0, 0, 0, 1);\r\n\r\n  // Live cell\r\n  if (col.r == 1.0) {\r\n    total -= 1.0;\r\n\r\n    // Underpopulation cap\r\n    if (total == 2.0) {\r\n      gl_FragColor = alive;\r\n    }\r\n    // Keep alive\r\n    else if (total == 3.0) {\r\n      gl_FragColor = alive;\r\n    }\r\n    // Overpopulation\r\n    else {\r\n      gl_FragColor = dead;\r\n    }\r\n  } else {\r\n    // Reproduction\r\n    if (total == 3.0) {\r\n      gl_FragColor = alive;\r\n    }\r\n    // Remain dead\r\n    else {\r\n      gl_FragColor = dead;\r\n    } \r\n  }\r\n}\r\n`;\r\n\r\nconst VSOURCE2 = \r\n`\r\nprecision mediump float;\r\nattribute vec2 aPos;\r\nattribute vec2 aTex;\r\nuniform mat4 uMatrix;\r\nuniform float uSize;\r\nvarying vec2 vTex;\r\nvoid main() {\r\n  vTex = aTex;\r\n  gl_Position = uMatrix * vec4(aPos, 0, 1);\r\n}\r\n`;\r\n\r\nconst FSOURCE2 = \r\n`\r\nprecision mediump float;\r\nuniform float uSize;\r\nuniform sampler2D uTexture;\r\nvarying vec2 vTex;\r\nvoid main() {\r\n  gl_FragColor = texture2D(uTexture, vTex);\r\n}\r\n`;\r\n\r\nfunction programs(gl) {\r\n  const vshader1 = new webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Shader(gl, gl.VERTEX_SHADER, VSOURCE1);\r\n  const fshader1 = new webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Shader(gl, gl.FRAGMENT_SHADER, FSOURCE1);\r\n\r\n  const program1 = new webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Program(gl);\r\n  program1.attachShader(vshader1);\r\n  program1.attachShader(fshader1);\r\n  program1.link();\r\n\r\n  const vshader2 = new webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Shader(gl, gl.VERTEX_SHADER, VSOURCE2);\r\n  const fshader2 = new webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Shader(gl, gl.FRAGMENT_SHADER, FSOURCE2);\r\n\r\n  const program2 = new webgl_basic_lib__WEBPACK_IMPORTED_MODULE_0__.Program(gl);\r\n  program2.attachShader(vshader2);\r\n  program2.attachShader(fshader2);\r\n  program2.link();\r\n\r\n  return [program1, program2];\r\n}\r\n\n\n//# sourceURL=webpack:///./src/shaders.js?");

/***/ }),

/***/ "../../lib/all.js":
/*!************************!*\
  !*** ../../lib/all.js ***!
  \************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BasicShape\": () => (/* reexport safe */ _geometry_types_js__WEBPACK_IMPORTED_MODULE_14__.BasicShape),\n/* harmony export */   \"Colors\": () => (/* reexport safe */ _extra_colors_js__WEBPACK_IMPORTED_MODULE_0__.Colors),\n/* harmony export */   \"Debug\": () => (/* reexport safe */ _webgl_debug_js__WEBPACK_IMPORTED_MODULE_2__.Debug),\n/* harmony export */   \"DebugShape\": () => (/* reexport safe */ _geometry_types_js__WEBPACK_IMPORTED_MODULE_14__.DebugShape),\n/* harmony export */   \"Icosahedron\": () => (/* reexport safe */ _geometry_icosahedron_js__WEBPACK_IMPORTED_MODULE_16__.Icosahedron),\n/* harmony export */   \"LinesFromTriangles\": () => (/* reexport safe */ _geometry_utils_js__WEBPACK_IMPORTED_MODULE_13__.LinesFromTriangles),\n/* harmony export */   \"Mat2\": () => (/* reexport safe */ _math_mat2_js__WEBPACK_IMPORTED_MODULE_10__.Mat2),\n/* harmony export */   \"Mat3\": () => (/* reexport safe */ _math_mat3_js__WEBPACK_IMPORTED_MODULE_11__.Mat3),\n/* harmony export */   \"Mat4\": () => (/* reexport safe */ _math_mat4_js__WEBPACK_IMPORTED_MODULE_12__.Mat4),\n/* harmony export */   \"Program\": () => (/* reexport safe */ _webgl_program_js__WEBPACK_IMPORTED_MODULE_3__.Program),\n/* harmony export */   \"RetrieveWebGLContext\": () => (/* reexport safe */ _webgl_utils_js__WEBPACK_IMPORTED_MODULE_1__.RetrieveWebGLContext),\n/* harmony export */   \"SetKeyboardListener\": () => (/* reexport safe */ _webgl_utils_js__WEBPACK_IMPORTED_MODULE_1__.SetKeyboardListener),\n/* harmony export */   \"SetOnClickHandler\": () => (/* reexport safe */ _webgl_utils_js__WEBPACK_IMPORTED_MODULE_1__.SetOnClickHandler),\n/* harmony export */   \"Shader\": () => (/* reexport safe */ _webgl_shader_js__WEBPACK_IMPORTED_MODULE_4__.Shader),\n/* harmony export */   \"Shape\": () => (/* reexport safe */ _geometry_types_js__WEBPACK_IMPORTED_MODULE_14__.Shape),\n/* harmony export */   \"Sphere\": () => (/* reexport safe */ _geometry_sphere_js__WEBPACK_IMPORTED_MODULE_15__.Sphere),\n/* harmony export */   \"Texture\": () => (/* reexport safe */ _webgl_texture_js__WEBPACK_IMPORTED_MODULE_5__.Texture),\n/* harmony export */   \"TexturedShape\": () => (/* reexport safe */ _geometry_types_js__WEBPACK_IMPORTED_MODULE_14__.TexturedShape),\n/* harmony export */   \"Vec2\": () => (/* reexport safe */ _math_vec2_js__WEBPACK_IMPORTED_MODULE_7__.Vec2),\n/* harmony export */   \"Vec3\": () => (/* reexport safe */ _math_vec3_js__WEBPACK_IMPORTED_MODULE_8__.Vec3),\n/* harmony export */   \"Vec4\": () => (/* reexport safe */ _math_vec4_js__WEBPACK_IMPORTED_MODULE_9__.Vec4),\n/* harmony export */   \"toDeg\": () => (/* reexport safe */ _math_utils_js__WEBPACK_IMPORTED_MODULE_6__.toDeg),\n/* harmony export */   \"toRad\": () => (/* reexport safe */ _math_utils_js__WEBPACK_IMPORTED_MODULE_6__.toRad)\n/* harmony export */ });\n/* harmony import */ var _extra_colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extra/colors.js */ \"../../lib/extra/colors.js\");\n/* harmony import */ var _webgl_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webgl/utils.js */ \"../../lib/webgl/utils.js\");\n/* harmony import */ var _webgl_debug_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./webgl/debug.js */ \"../../lib/webgl/debug.js\");\n/* harmony import */ var _webgl_program_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./webgl/program.js */ \"../../lib/webgl/program.js\");\n/* harmony import */ var _webgl_shader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./webgl/shader.js */ \"../../lib/webgl/shader.js\");\n/* harmony import */ var _webgl_texture_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webgl/texture.js */ \"../../lib/webgl/texture.js\");\n/* harmony import */ var _math_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./math/utils.js */ \"../../lib/math/utils.js\");\n/* harmony import */ var _math_vec2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./math/vec2.js */ \"../../lib/math/vec2.js\");\n/* harmony import */ var _math_vec3_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./math/vec3.js */ \"../../lib/math/vec3.js\");\n/* harmony import */ var _math_vec4_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./math/vec4.js */ \"../../lib/math/vec4.js\");\n/* harmony import */ var _math_mat2_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./math/mat2.js */ \"../../lib/math/mat2.js\");\n/* harmony import */ var _math_mat3_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./math/mat3.js */ \"../../lib/math/mat3.js\");\n/* harmony import */ var _math_mat4_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./math/mat4.js */ \"../../lib/math/mat4.js\");\n/* harmony import */ var _geometry_utils_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./geometry/utils.js */ \"../../lib/geometry/utils.js\");\n/* harmony import */ var _geometry_types_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./geometry/types.js */ \"../../lib/geometry/types.js\");\n/* harmony import */ var _geometry_sphere_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./geometry/sphere.js */ \"../../lib/geometry/sphere.js\");\n/* harmony import */ var _geometry_icosahedron_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./geometry/icosahedron.js */ \"../../lib/geometry/icosahedron.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///../../lib/all.js?");

/***/ }),

/***/ "../../lib/extra/colors.js":
/*!*********************************!*\
  !*** ../../lib/extra/colors.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Colors\": () => (/* binding */ Colors)\n/* harmony export */ });\n/* harmony import */ var _all_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../all.js */ \"../../lib/all.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\n/**\r\n * @class Colors wrapping color utilities\r\n */\r\nclass Colors {\r\n  \r\n  /**\r\n   * Convert from RGB to HSV.\r\n   *\r\n   * RGB values in range [0.0, 1.0]\r\n   * HSV values in range [0.0, 1.0]\r\n   *\r\n   * @param {Vec3} col the RGB input color\r\n   * \r\n   * @return {Vec3} the HSV equivalent\r\n   */\r\n  static RgbToHsv(col) {\r\n    // Unpack\r\n    const [r, g, b] = [col.r, col.g, col.b];\r\n\r\n    // Calc cmin, cmax and delta\r\n    const cmax = Math.max(r, g, b)\r\n    const cmin = Math.min(r, g, b);\r\n    const delta = cmax - cmin;\r\n    \r\n    // Calc HSV components\r\n    const v = cmax;\r\n    const s = (cmax === 0) ? 0 : (delta / cmax);\r\n    var h = 0;\r\n    if (delta !== 0) {\r\n      if (cmax === r) {\r\n        h = ((g - b) / delta) % 6;\r\n      }\r\n      else if (cmax === g) {\r\n        h = ((b - r) / delta) + 2;\r\n      }\r\n      else {\r\n        h = ((r - g) / delta) + 4;\r\n      }\r\n      h *= (1.0 / 6.0);\r\n      if (h < 0.0) h += 1.0;\r\n    }\r\n    \r\n    // Result\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(h, s, v);\r\n  }\r\n\r\n  /**\r\n   * Convert from HSV to RGB.\r\n   *\r\n   * RGB values in range [0.0, 1.0]\r\n   * HSV values in range [0.0, 1.0]\r\n   *\r\n   * @param {Vec3} col the HSV input color\r\n   * \r\n   * @return {Vec3} the RGB equivalent\r\n   */\r\n  static HsvToRgb(col) {\r\n    // Unpack\r\n    const [h, s, v] = [col.h * 360, col.s, col.v];\r\n\r\n    // Calc c, x and m\r\n    const c = v * s;\r\n    const x = c * (1 - Math.abs((h / 60) % 2 - 1));\r\n    const m = v - c;\r\n    \r\n    // Calc RGB components\r\n    const [r, g, b] = (\r\n      (h <  60) ? [c, x, 0] :\r\n      (h < 120) ? [x, c, 0] :\r\n      (h < 180) ? [0, c, x] :\r\n      (h < 240) ? [0, x, c] :\r\n      (h < 300) ? [x, 0, c] :\r\n      [c, 0, x]\r\n    );\r\n    \r\n    // Result\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(r + m, g + m, b + m);\r\n  }\r\n\r\n  /**\r\n   * Convert from Hex String to RGB.\r\n   * The input string can contains the \"#\" character at the begin.\r\n   *\r\n   * RGB values in range [0.0, 1.0]\r\n   *\r\n   * @param {string} hex the Hexadecimal String input color\r\n   * \r\n   * @return {Vec3} the RGB equivalent\r\n   */\r\n  static HexToRgb(hex) {\r\n    // Remove # at the begin (if exists)\r\n    hex = hex.substring(hex.indexOf(\"#\") + 1);\r\n  \r\n    // Ensure hex string is of size 6\r\n    if (hex.length != 6) throw new Error(\"Unsupported format\");\r\n  \r\n    // Parse value\r\n    const bigint = parseInt(hex, 16);\r\n  \r\n    // Extract components\r\n    const r = (bigint >> 16) & 0xFF;\r\n    const g = (bigint >>  8) & 0xFF;\r\n    const b = (bigint >>  0) & 0xFF;\r\n\r\n    // Return result\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(r, g, b).div(255);\r\n  }\r\n\r\n  /**\r\n   * Convert from Hex String to RGBA.\r\n   * The input string can contains the \"#\" character at the begin.\r\n   *\r\n   * RGBA values in range [0.0, 1.0]\r\n   *\r\n   * @param {string} hex the Hexadecimal String input color\r\n   * \r\n   * @return {Vec4} the RGBA equivalent\r\n   */\r\n  static HexToRgba(hex) {\r\n    // Remove # at the begin (if exists)\r\n    hex = hex.substring(hex.indexOf(\"#\") + 1);\r\n  \r\n    // Ensure hex string is of size 8\r\n    if (hex.length != 8) throw new Error(\"Unsupported format\");\r\n  \r\n    // Parse value\r\n    const bigint = parseInt(hex, 16);\r\n  \r\n    // Extract components\r\n    const r = (bigint >> 24) & 0xFF;\r\n    const g = (bigint >> 16) & 0xFF;\r\n    const b = (bigint >>  8) & 0xFF;\r\n    const a = (bigint >>  0) & 0xFF;\r\n\r\n    // Return result\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec4(r, g, b, a).div(255);\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack:///../../lib/extra/colors.js?");

/***/ }),

/***/ "../../lib/geometry/icosahedron.js":
/*!*****************************************!*\
  !*** ../../lib/geometry/icosahedron.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Icosahedron\": () => (/* binding */ Icosahedron)\n/* harmony export */ });\n/* harmony import */ var _all_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../all.js */ \"../../lib/all.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @class Icosahedron representing an Icosahedron.\r\n */\r\nclass Icosahedron {\r\n  /**\r\n   * Creates a BasicShape of an Icosahedron with a user-defined precision.\r\n   *\r\n   * @param {number} precision the precision to use when\r\n   *                 generating the shape\r\n   *\r\n   * @return {BasicShape} the generated icosahedron\r\n   */\r\n  static asBasicShape(precision) {\r\n    const { verteces, uvs, triangles } = Icosahedron.#buildIcosahedron(precision);\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_0__.BasicShape(verteces, triangles);\r\n  }\r\n  \r\n  /**\r\n   * Creates a TexturedShape of an Icosahedron with a user-defined precision.\r\n   *\r\n   * @param {number} precision the precision to use when\r\n   *                 generating the shape\r\n   *\r\n   * @return {TexturedShape} the generated icosahedron\r\n   */\r\n  static asTexturedShape(precision) {\r\n    const { verteces, uvs, triangles } = Icosahedron.#buildIcosahedron(precision);\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_0__.TexturedShape(verteces, uvs, triangles);\r\n  }\r\n  \r\n  /**\r\n   * Creates a DebugShape of an Icosahedron with a user-defined precision.\r\n   *\r\n   * @param {number} precision the precision to use when\r\n   *                 generating the shape\r\n   *\r\n   * @return {DebugShape} the generated icosahedron\r\n   */\r\n  static asDebugShape(precision) {\r\n    const { verteces, uvs, normals, triangles, lines } = Icosahedron.#buildIcosahedron(precision);\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_0__.DebugShape(verteces, uvs, normals, triangles, lines);\r\n  }\r\n\r\n  static #buildIcosahedron(precision) {\r\n    precision = Math.max(0, precision);\r\n    \r\n    const verteces = [];\r\n    var uvs = [];\r\n    var normals = [];\r\n    var triangles = [];\r\n    var lines = [];\r\n\r\n    // Magic values\r\n    const X = 0.525731112119133606;\r\n    const Z = 0.850650808352039932;\r\n    const N = 0.0;\r\n\r\n    // Build the 12-verteces base icosahedron\r\n    verteces.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(-X, N, Z));\r\n    verteces.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3( X, N, Z));\r\n    verteces.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(-X, N,-Z));\r\n    verteces.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3( X, N,-Z));\r\n    \r\n    verteces.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3( N, Z, X));\r\n    verteces.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3( N, Z,-X));\r\n    verteces.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3( N,-Z, X));\r\n    verteces.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3( N,-Z,-X));\r\n    \r\n    verteces.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3( Z, X, N));\r\n    verteces.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(-Z, X, N));\r\n    verteces.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3( Z,-X, N));\r\n    verteces.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(-Z,-X, N));\r\n    \r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  0,  4,  1));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  0,  9,  4));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  9,  5,  4));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  4,  5,  8));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  4,  8,  1));\r\n    \r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  8, 10,  1));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  8,  3, 10));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  5,  3,  8));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  5,  2,  3));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  2,  7,  3));\r\n    \r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  7, 10,  3));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  7,  6, 10));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  7, 11,  6));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3( 11,  0,  6));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  0,  1,  6));\r\n    \r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  6,  1, 10));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  9,  0, 11));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  9, 11,  2));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  9,  2,  5));\r\n    triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(  7,  2, 11));\r\n\r\n    // Method to create a middle point between two others\r\n    const cache1 = {};\r\n    function middle(a, b) {\r\n      // Compute key\r\n      const key = Math.max(a, b) + \"_\" + Math.min(a, b);\r\n\r\n      // Check if already calculated\r\n      if (!cache1[key]) {\r\n        \r\n        // Retrieve the two vectors from indeces\r\n        const [vecA, vecB] = [verteces[a], verteces[b]];\r\n  \r\n        // Create a new vec (middle)\r\n        const newVec = _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3.Zeros().add(vecA).add(vecB).normalize();\r\n  \r\n        // Save result in cache\r\n        cache1[key] = verteces.push(newVec) - 1;\r\n      }\r\n\r\n      // Return the newly created vec index\r\n      return cache1[key];\r\n    };\r\n\r\n    // Iterate several times\r\n    for (let i = 0; i < precision; ++i) {\r\n\r\n      // Temporary array\r\n      const result = [];\r\n\r\n      // Iterate over each triangle to split it in four new ones\r\n      triangles.forEach((face) => {\r\n\r\n        // Indexes\r\n        const a = middle(face.x, face.y);\r\n        const b = middle(face.y, face.z);\r\n        const c = middle(face.z, face.x);\r\n        \r\n        // Push new triangles\r\n        result.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(face.x, a, c));\r\n        result.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(face.y, b, a));\r\n        result.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(face.z, c, b));\r\n        result.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(     a, b, c));\r\n      });\r\n\r\n      // Update triangles\r\n      triangles = result;\r\n    }\r\n\r\n    // Lines\r\n    lines = (0,_all_js__WEBPACK_IMPORTED_MODULE_0__.LinesFromTriangles)(verteces, triangles);\r\n\r\n    // Create normals for each vertex\r\n    normals = verteces.map((v) => v.clone().normalize());\r\n    \r\n    // Create uvs for each vertex\r\n    uvs = verteces.map((v) => v.toUVofSphere());\r\n\r\n    return { verteces, uvs, normals, triangles, lines };\r\n  }\r\n}\n\n//# sourceURL=webpack:///../../lib/geometry/icosahedron.js?");

/***/ }),

/***/ "../../lib/geometry/sphere.js":
/*!************************************!*\
  !*** ../../lib/geometry/sphere.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Sphere\": () => (/* binding */ Sphere)\n/* harmony export */ });\n/* harmony import */ var _all_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../all.js */ \"../../lib/all.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @class Sphere representing an Sphere.\r\n */\r\nclass Sphere {\r\n  /**\r\n   * Creates a BasicShape of an Sphere with a user-defined precision.\r\n   *\r\n   * @param {number} precisionx the num of vertical slices\r\n   * @param {number} precisiony the num of horizontal slices\r\n   *\r\n   * @return {BasicShape} the generated sphere\r\n   */\r\n  static asBasicShape(precisionx, precisiony) {\r\n    const { verteces, uvs, triangles } = Sphere.#buildSphere(precisionx, precisiony);\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_0__.BasicShape(verteces, triangles);\r\n  }\r\n  \r\n  /**\r\n   * Creates a TexturedShape of a Sphere with a user-defined precision.\r\n   *\r\n   * @param {number} precisionx the num of vertical slices\r\n   * @param {number} precisiony the num of horizontal slices\r\n   *\r\n   * @return {TexturedShape} the generated sphere\r\n   */\r\n  static asTexturedShape(precisionx, precisiony) {\r\n    const { verteces, uvs, triangles } = Sphere.#buildSphere(precisionx, precisiony);\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_0__.TexturedShape(verteces, uvs, triangles);\r\n  }\r\n  \r\n  /**\r\n   * Creates a DebugShape of a Sphere with a user-defined precision.\r\n   *\r\n   * @param {number} precisionx the num of vertical slices\r\n   * @param {number} precisiony the num of horizontal slices\r\n   *\r\n   * @return {DebugShape} the generated sphere\r\n   */\r\n  static asDebugShape(precisionx, precisiony) {\r\n    const { verteces, uvs, normals, triangles, lines } = Sphere.#buildSphere(precisionx, precisiony);\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_0__.DebugShape(verteces, uvs, normals, triangles, lines);\r\n  }\r\n\r\n  static #buildSphere(precisionx, precisiony) {\r\n    const num_vert_slices = Math.max(3, precisionx);\r\n    const num_hori_slices = Math.max(3, precisiony);\r\n    \r\n    const verteces = [];\r\n    const uvs = [];\r\n    const normals = [];\r\n    const triangles = [];\r\n    var lines = [];\r\n\r\n    // Iterate over each vertical slice\r\n    for(let x = 0; x <= num_vert_slices; ++x) {\r\n\r\n      // Iterate over each horizontal slice\r\n      for(let y = 0; y <= num_hori_slices; ++y) {\r\n      \r\n        // Find the angles\r\n        const angle0 =     Math.PI * x / num_vert_slices;\r\n        const angle1 = 2 * Math.PI * y / num_hori_slices;\r\n\r\n        // Retrieve coordinates from angles\r\n        const vx = Math.sin(angle0) * Math.cos(angle1);\r\n        const vy = Math.cos(angle0);\r\n        const vz = Math.sin(angle0) * Math.sin(angle1);\r\n\r\n        // Retrieve uvs from slice indexes\r\n        const u = y / num_hori_slices;\r\n        const v = x / num_vert_slices;\r\n\r\n        // Push new vertex with position, uv and normal\r\n        verteces.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(vx, vy, vz));\r\n        uvs.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec2(u, v));\r\n        normals.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(vx, vy, vz));\r\n      }\r\n    }\r\n\r\n    const L = num_hori_slices + 1;\r\n\r\n    // Iterate over each vertical slice\r\n    for(let x = 0; x < num_vert_slices; ++x) {\r\n\r\n      // Iterate over each horizontal slice\r\n      for(let y = 0; y < num_hori_slices; ++y) {\r\n        const b  = x * L;\r\n        const c  = ((y != L - 1) ? L : 0);\r\n        \r\n        const i0 = b + y;\r\n        const i1 = b + y + 1;\r\n        const i2 = b + y + L;\r\n        const i3 = b + (y + 1) % L;\r\n        \r\n        // Triangles\r\n        if (x != num_vert_slices - 1) {\r\n          triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(i0, i2, i3 + L));\r\n        }        \r\n        if (x != 0) {\r\n          triangles.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(i0, i1, i3 + L));\r\n        }\r\n      }\r\n    }\r\n\r\n    // uvs.forEach((v) => console.log(v.toString(2)));\r\n    // verteces.forEach((v) => console.log(v.toString(3)));\r\n    // triangles.forEach((t) => console.log(t.toString(0)));\r\n\r\n    // Lines\r\n    lines = (0,_all_js__WEBPACK_IMPORTED_MODULE_0__.LinesFromTriangles)(verteces, triangles);\r\n\r\n    return { verteces, uvs, normals, triangles, lines };\r\n  }\r\n}\n\n//# sourceURL=webpack:///../../lib/geometry/sphere.js?");

/***/ }),

/***/ "../../lib/geometry/types.js":
/*!***********************************!*\
  !*** ../../lib/geometry/types.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BasicShape\": () => (/* binding */ BasicShape),\n/* harmony export */   \"DebugShape\": () => (/* binding */ DebugShape),\n/* harmony export */   \"Shape\": () => (/* binding */ Shape),\n/* harmony export */   \"TexturedShape\": () => (/* binding */ TexturedShape)\n/* harmony export */ });\n/* harmony import */ var _all_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../all.js */ \"../../lib/all.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\n/**\r\n * @class Shape representing a generic geometry.\r\n */\r\nclass Shape {\r\n  verteces;\r\n  numVerteces;\r\n  triangles;\r\n  numTriangles;\r\n  \r\n  /**\r\n   * Creates an instance of a Shape.\r\n   *\r\n   * @param {list of number} verteces the verteces list\r\n   * @param {list of number} triangles the triangles list\r\n   */\r\n  constructor(verteces, triangles) {\r\n    this.verteces = new Float32Array(verteces);\r\n    this.numVerteces = this.verteces.length / this.constructor.VertexSize();\r\n    this.triangles = new Uint16Array(triangles);\r\n    this.numTriangles = this.triangles.length / 3;\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve data count per vertex.\r\n   * Should be implemented by specialized classes.\r\n   * \r\n   * @return {number} the vertex size\r\n   */\r\n  static VertexSize() {\r\n    throw new Error(\"VertexSize() not implemented\");\r\n  }\r\n\r\n  /**\r\n   * Syntactic sugar to retrieve vertex size from instances.\r\n   * \r\n   * @return {number} the vertex size\r\n   */\r\n  vertexSize() {\r\n    return this.constructor.VertexSize();\r\n  }\r\n\r\n  /**\r\n   * Estimate memory cost of the shape.\r\n   *\r\n   * @return {number, number, number} the memory occupation\r\n   */\r\n  get bytes() {\r\n    return this.verteces.length * 4 + this.triangles.length * 2;\r\n  }\r\n\r\n  /**\r\n   * Flatten the array.\r\n   *\r\n   * ex.\r\n   *     a = [(0, 1), (2, 3)]\r\n   *\r\n   *     flattenVecArray(a) = [0, 1, 2, 3]\r\n   *\r\n   * @param {list of Vec} array the array to flatten\r\n   *\r\n   * @return {array} a plain JS array\r\n   */\r\n  static flattenVecArray(array) {\r\n    return Shape.flattenVecArrays([array]);\r\n  }\r\n  \r\n  /**\r\n   * Flatten the arrays combining each element from each array.\r\n   *\r\n   * ex.\r\n   *     a = [(0, 1), (2, 3)]\r\n   *     b = [(4, 5), (6, 7)]\r\n   *\r\n   *     flattenVecArrays([a, b]) = [0, 1, 4, 5, 2, 3, 6, 7]\r\n   *\r\n   * @param {list of list of Vec} arrays the array list to flatten\r\n   *\r\n   * @return {array} a plain JS array\r\n   */\r\n  static flattenVecArrays(arrays) {\r\n    return arrays[0].map((_, ind) => arrays.map((a) => [...a[ind].values]).flat()).flat();\r\n  }\r\n\r\n  /**\r\n   * Debug draw points for each vertex.\r\n   *\r\n   * Works only when using the DebugShape.\r\n   */\r\n  drawPoints(mat, color, size) { }\r\n\r\n  /**\r\n   * Debug draw lines for each segment.\r\n   *\r\n   * Works only when using the DebugShape.\r\n   */\r\n  drawLines(mat, color) { }\r\n}\r\n\r\n/**\r\n * @class BasicShape representing a basic geometry defined by:\r\n * - verteces array of { 3D-Pos }\r\n * - triangles array of { indices }\r\n */\r\nclass BasicShape extends Shape {\r\n  /**\r\n   * Creates an instance of a BasicShape.\r\n   *\r\n   * @param {list of Vec3} verteces the verteces list\r\n   * @param {list of Vec3} triangles the triangles list\r\n   */\r\n  constructor(verteces, triangles) {\r\n    super(\r\n      Shape.flattenVecArray(verteces),\r\n      Shape.flattenVecArray(triangles)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve data count per vertex.\r\n   * \r\n   * @return {number} the vertex size\r\n   */\r\n  static VertexSize() {\r\n    return 3;\r\n  }\r\n}\r\n\r\n/**\r\n * @class TexturedShape representing a basic geometry defined by:\r\n * - verteces array of { 3D-Pos, 2D-Texture-Coord }\r\n * - triangles array of { indices }\r\n */\r\nclass TexturedShape extends Shape {\r\n  /**\r\n   * Creates an instance of a TexturedShape.\r\n   *\r\n   * @param {list of Vec3} verteces the verteces list\r\n   * @param {list of Vec2} uvs the uvs list\r\n   * @param {list of Vec3} triangles the triangles list\r\n   */\r\n  constructor(verteces, uvs, triangles) {\r\n    super(\r\n      Shape.flattenVecArrays([verteces, uvs]),\r\n      Shape.flattenVecArray(triangles)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve data count per vertex.\r\n   * \r\n   * @return {number} the vertex size\r\n   */\r\n  static VertexSize() {\r\n    return 5;\r\n  }\r\n}\r\n\r\n/**\r\n * @class DebugShape representing a basic geometry defined by:\r\n * - verteces array of { 3D-Pos, 2D-Texture-Coord, 3D-Normal }\r\n * - triangles array of { indices }\r\n * - lines array of { indices }\r\n */\r\nclass DebugShape extends Shape {\r\n  lines;\r\n  numLines;\r\n  \r\n  /**\r\n   * Creates an instance of a DebugShape.\r\n   *\r\n   * @param {list of Vec3} verteces the verteces list\r\n   * @param {list of Vec2} uvs the uvs list\r\n   * @param {list of Vec3} normals the normals list\r\n   * @param {list of Vec3} triangles the triangles list\r\n   * @param {list of Vec2} lines the lines list\r\n   */\r\n  constructor(verteces, uvs, normals, triangles, lines) {\r\n    super(\r\n      Shape.flattenVecArrays([verteces, uvs, normals]),\r\n      Shape.flattenVecArray(triangles)\r\n    );\r\n    this.lines = new Uint16Array(Shape.flattenVecArray(lines));\r\n    this.numLines = this.lines.length / 2;\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve data count per vertex.\r\n   * \r\n   * @return {number} the vertex size\r\n   */\r\n  static VertexSize() {\r\n    return 8;\r\n  }\r\n\r\n  /**\r\n   * Estimate memory cost of the shape.\r\n   *\r\n   * @return {number, number, number} the memory occupation\r\n   */\r\n  get bytes() {\r\n    return super.bytes + this.lines.length * 2;\r\n  }\r\n\r\n  /**\r\n   * Debug draw points for each vertex.\r\n   *\r\n   * @param {Mat4} mat the transformation matrix\r\n   * @param {Vec4} color the color of each point\r\n   * @param {number} size the size of each point\r\n   */\r\n  drawPoints(mat, color, size) {\r\n    _all_js__WEBPACK_IMPORTED_MODULE_0__.Debug.drawPoints(this.verteces, this.vertexSize(), mat, this.numVerteces, color, size);\r\n  }\r\n\r\n  /**\r\n   * Debug draw lines for each segment.\r\n   *\r\n   * @param {Mat4} mat the transformation matrix\r\n   * @param {Vec4} color the color of each point\r\n   */\r\n  drawLines(mat, color) {\r\n    _all_js__WEBPACK_IMPORTED_MODULE_0__.Debug.drawLines(this.verteces, this.lines, this.vertexSize(), mat, this.numLines, color);\r\n  }\r\n}\n\n//# sourceURL=webpack:///../../lib/geometry/types.js?");

/***/ }),

/***/ "../../lib/geometry/utils.js":
/*!***********************************!*\
  !*** ../../lib/geometry/utils.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LinesFromTriangles\": () => (/* binding */ LinesFromTriangles)\n/* harmony export */ });\n/* harmony import */ var _all_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../all.js */ \"../../lib/all.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\n/*\r\n * Retrieve a lines array of indexes from triangles list and verteces.\r\n * \r\n * @params {list of Vec3} verteces the list of verteces\r\n * @params {list of Vec3} triangles the list of triangles\r\n * \r\n * @return {list of Vec2} the lines\r\n */\r\nfunction LinesFromTriangles(verteces, triangles) {\r\n  const lines = [];\r\n  const cache2 = new Set();\r\n\r\n  triangles.forEach((face) => {\r\n    // Add lines\r\n    [[face.x, face.y], [face.y, face.z], [face.z, face.x]].forEach(([a, b]) => {\r\n      // Compute key\r\n      const vecA = verteces[a];\r\n      const vecB = verteces[b];\r\n      const key = Math.max(a, b) + \"_\" + Math.min(a, b);\r\n      \r\n      // Check if line is in cache\r\n      if (!cache2.has(key)) {\r\n        lines.push(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec2(a, b));\r\n        cache2.add(key);\r\n      }\r\n    });\r\n  });\r\n\r\n  return lines;\r\n}\n\n//# sourceURL=webpack:///../../lib/geometry/utils.js?");

/***/ }),

/***/ "../../lib/math/mat.js":
/*!*****************************!*\
  !*** ../../lib/math/mat.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Mat\": () => (/* binding */ Mat)\n/* harmony export */ });\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n/**\r\n * @class Mat base vector class.\r\n */\r\nclass Mat {\r\n  values;\r\n\r\n  /**\r\n   * Creates an instance of a Mat.\r\n   *\r\n   * @param {array of number} arr the array of values\r\n   */\r\n  constructor(arr) {\r\n    this.values = new Float32Array(arr);\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve elements count.\r\n   * Should be implemented by specialized classes.\r\n   * \r\n   * @return {number} the num of elements\r\n   */\r\n  static count() {\r\n    throw new Error(\"count() not implemented\");\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve side count.\r\n   * Should be implemented by specialized classes.\r\n   * \r\n   * @return {number} the num of elements on a side of the matrix\r\n   */\r\n  static side() {\r\n    throw new Error(\"side() not implemented\");\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Mat initialization from array.\r\n   * Array contains elements in Column-Major order.\r\n   * Should be implemented by specialized classes.\r\n   * \r\n   * @param {array of number} arr the array to copy\r\n   * \r\n   * @return {Mat} the newly created matrix\r\n   */\r\n  static FromArrayCM(arr) {\r\n    throw new Error(\"FromArrayCM() not implemented\");\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Mat initialization from array.\r\n   * Array contains elements in Row-Major order.\r\n   * Should be implemented by specialized classes.\r\n   * \r\n   * @param {array of number} arr the array to copy\r\n   * \r\n   * @return {Mat} the newly created matrix\r\n   */\r\n  static FromArrayRM(arr) {\r\n    throw new Error(\"FromArrayRM() not implemented\");\r\n  }\r\n\r\n  /**\r\n   * Retrieve an element from the Mat2.\r\n   *\r\n   * @param {number} row index of the row\r\n   * @param {number} col index of the column\r\n   *\r\n   * @return {number} the number in position [row][col]\r\n   */\r\n  get(row, col) {\r\n    return this.values[col * this.constructor.side() + row];\r\n  }\r\n\r\n  /**\r\n   * Update an element from the Mat2.\r\n   *\r\n   * @param {number} row index of the row\r\n   * @param {number} col index of the column\r\n   */\r\n  set(row, col, value) {\r\n    this.values[col * this.constructor.side() + row] = value;\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve a string representing the Mat instance.\r\n   * \r\n   * @return {string} string representation\r\n   */\r\n  toString(decimal = 20) {\r\n    const rows = new Array(this.constructor.side()).fill(0)\r\n      .map((el, ind) => \"\\t\" + this.row(ind).toString(decimal));\r\n    return \"[\\n\" + rows.join(\",\\n\") + \"\\n]\";\r\n  }\r\n\r\n  /**\r\n   * Compare the two Mat.\r\n   *\r\n   * @param {Mat} mat the matrix to compare\r\n   *\r\n   * @return {boolean} if the Mat are equals\r\n   */\r\n  equals(mat) {\r\n    for (let i = 0; i < this.constructor.count(); ++i)\r\n      if (this.values[i] !== vec.values[i])\r\n        return false;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Round the Mat.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {number} decimal the decimal places to left\r\n   *\r\n   * @return {Mat} this\r\n   */\r\n  round(decimal) {\r\n    for (let i = 0; i < this.constructor.count(); ++i)\r\n      this.values[i] = this.values[i].toFixed(decimal);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Transpose the Mat.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @return {Mat} this\r\n   */\r\n  transpose() {\r\n    for (let r = 0; r < this.constructor.side(); ++r)\r\n      for (let c = r + 1; c < this.constructor.side(); ++c) {\r\n        const tmp = this.get(r, c);\r\n        this.set(r, c, this.get(c, r));\r\n        this.set(c, r, tmp);\r\n      }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec clone.\r\n   * \r\n   * @return {Vec} the newly created vector\r\n   */\r\n  clone() {\r\n    return this.constructor.FromArrayCM(this.values);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Mat initialization with zeros.\r\n   *\r\n   * @return {Mat} the newly created vector\r\n   */\r\n  static Identity() {\r\n    const arr = new Array(this.count()).fill(0);\r\n    for (let i = 0; i < this.count(); ++i)\r\n      if ((i % (this.side() + 1)) === 0)\r\n        arr[i] = 1;\r\n    return this.FromArrayCM(arr);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Mat initialization with equal values.\r\n   * \r\n   * @param {number} v the value to be used for every coordinate\r\n   * \r\n   * @return {Mat} the newly created vector\r\n   */\r\n  static All(v) {\r\n    return this.FromArrayCM(new Array(this.count()).fill(v));\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Mat initialization with zeros.\r\n   *\r\n   * @return {Mat} the newly created vector\r\n   */\r\n  static Zeros() {\r\n    return this.All(0);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Mat initialization with ones.\r\n   *\r\n   * @return {Mat} the newly created vector\r\n   */\r\n  static Ones() {\r\n    return this.All(1);\r\n  }\r\n}\n\n//# sourceURL=webpack:///../../lib/math/mat.js?");

/***/ }),

/***/ "../../lib/math/mat2.js":
/*!******************************!*\
  !*** ../../lib/math/mat2.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Mat2\": () => (/* binding */ Mat2)\n/* harmony export */ });\n/* harmony import */ var _mat_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mat.js */ \"../../lib/math/mat.js\");\n/* harmony import */ var _all_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../all.js */ \"../../lib/all.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\n\r\n/**\r\n * @class Mat representing a 2x2 matrix.\r\n */\r\nclass Mat2 extends _mat_js__WEBPACK_IMPORTED_MODULE_0__.Mat {\r\n  /**\r\n   * Creates an instance of a Mat2.\r\n   *\r\n   * @param {number, number} the first row\r\n   * @param {number, number} the second row\r\n   */\r\n  constructor(x_r1, y_r1,\r\n              x_r2, y_r2) {\r\n    super([x_r1, x_r2,\r\n           y_r1, y_r2]);\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve elements count.\r\n   * \r\n   * @return {number} the num of elements\r\n   */\r\n  static count() {\r\n    return 4;\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve side count.\r\n   * \r\n   * @return {number} the num of elements on the side of the matrix\r\n   */\r\n  static side() {\r\n    return 2;\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Mat2 initialization with an array.\r\n   *\r\n   * Column-Major version.\r\n   *\r\n   * @return {Mat2} the newly created vector\r\n   */\r\n  static FromArrayCM(arr) {\r\n    return new Mat2(arr[0], arr[2],\r\n                    arr[1], arr[3]);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Mat2 initialization with an array.\r\n   *\r\n   * Row-Major version.\r\n   *\r\n   * @return {Mat2} the newly created vector\r\n   */\r\n  static FromArrayRM(arr) {\r\n    return new Mat2(arr[0], arr[1],\r\n                    arr[2], arr[3]);\r\n  }\r\n\r\n  /**\r\n   * Retrieve a row from the Mat2 as a Vec2.\r\n   *\r\n   * @param {number} index the index of the row\r\n   *\r\n   * @return {Vec2} the selected row\r\n   */\r\n  row(index) {\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_1__.Vec2(this.values[0 + index],\r\n                    this.values[2 + index]);\r\n  }\r\n\r\n  /**\r\n   * Retrieve a col from the Mat2 as a Vec2.\r\n   *\r\n   * @param {number} index the index of the column\r\n   *\r\n   * @return {Vec2} the selected column\r\n   */\r\n  col(index) {\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_1__.Vec2(this.values[index * 2 + 0],\r\n                    this.values[index * 2 + 1]);\r\n  }\r\n\r\n  /**\r\n   * Apply the transformation to the Mat2.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {Mat2} mat the matrix to apply\r\n   *\r\n   * @return {Mat2} this\r\n   */\r\n  apply(mat) {\r\n    const v00 = this.values[0];\r\n    const v01 = this.values[1];\r\n    const v10 = this.values[2];\r\n    const v11 = this.values[3];\r\n    \r\n    this.values[0] = v00 * mat.values[0] + v01 * mat.values[2];\r\n    this.values[1] = v00 * mat.values[1] + v01 * mat.values[3];\r\n    this.values[2] = v10 * mat.values[0] + v11 * mat.values[2];\r\n    this.values[3] = v10 * mat.values[1] + v11 * mat.values[3];\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Apply the scale to the Mat2.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {Vec2} vec the scale to apply\r\n   *\r\n   * @return {Mat2} this\r\n   */\r\n  scale(vec) {\r\n    this.values[0] *= vec.x;\r\n    this.values[1] *= vec.x;\r\n    \r\n    this.values[2] *= vec.y;\r\n    this.values[3] *= vec.y;\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Apply the rotation to the Mat2.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {number} ang the angle to rotate (in radians)\r\n   *\r\n   * @return {Mat2} this\r\n   */\r\n  rotate(ang) {\r\n    const s = Math.sin(ang);\r\n    const c = Math.cos(ang);\r\n\r\n    const v00 = this.values[0];\r\n    const v10 = this.values[1];\r\n    const v01 = this.values[2];\r\n    const v11 = this.values[3];\r\n\r\n    this.values[0] = v00 *  c + v01 * s;\r\n    this.values[1] = v10 *  c + v11 * s;\r\n    this.values[2] = v00 * -s + v01 * c;\r\n    this.values[3] = v10 * -s + v11 * c;\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Compute the determinant of the Mat2.\r\n   *\r\n   * @return {number} the determinant\r\n   */\r\n  det() {\r\n    return this.values[0] * this.values[3]\r\n         - this.values[2] * this.values[1];\r\n  }\r\n\r\n  /**\r\n   * Compute the inverse of the Mat2.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @throws Error when det() is 0\r\n   *\r\n   * @return {Mat2} this\r\n   */\r\n  inverse() {\r\n    const v00 = this.values[0];\r\n    const v10 = this.values[1];\r\n    const v01 = this.values[2];\r\n    const v11 = this.values[3];\r\n    \r\n    var det = v00 * v11 - v01 * v10;\r\n\r\n    if (det === 0) throw new Error(\"Unable to inverse matrix if det is zero\");\r\n    \r\n    det = 1.0 / det;\r\n\r\n    this.values[0] =  v11 * det;\r\n    this.values[1] = -v10 * det;\r\n    this.values[2] = -v01 * det;\r\n    this.values[3] =  v00 * det;\r\n    \r\n    return this;\r\n  }\r\n}\n\n//# sourceURL=webpack:///../../lib/math/mat2.js?");

/***/ }),

/***/ "../../lib/math/mat3.js":
/*!******************************!*\
  !*** ../../lib/math/mat3.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Mat3\": () => (/* binding */ Mat3)\n/* harmony export */ });\n/* harmony import */ var _mat_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mat.js */ \"../../lib/math/mat.js\");\n/* harmony import */ var _all_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../all.js */ \"../../lib/all.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\n\r\n/**\r\n * @class Mat representing a 3x3 matrix.\r\n */\r\nclass Mat3 extends _mat_js__WEBPACK_IMPORTED_MODULE_0__.Mat {\r\n  /**\r\n   * Creates an instance of a Mat3.\r\n   *\r\n   * @param {number, number, number} the first row\r\n   * @param {number, number, number} the second row\r\n   * @param {number, number, number} the third row\r\n   */\r\n  constructor(x_r1, y_r1, z_r1,\r\n              x_r2, y_r2, z_r2,\r\n              x_r3, y_r3, z_r3,) {\r\n    super([x_r1, x_r2, x_r3,\r\n           y_r1, y_r2, y_r3,\r\n           z_r1, z_r2, z_r3]);\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve elements count.\r\n   * \r\n   * @return {number} the num of elements\r\n   */\r\n  static count() {\r\n    return 9;\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve side count.\r\n   * \r\n   * @return {number} the num of elements on the side of the matrix\r\n   */\r\n  static side() {\r\n    return 3;\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Mat3 initialization with an array.\r\n   *\r\n   * Column-Major version.\r\n   *\r\n   * @return {Mat3} the newly created vector\r\n   */\r\n  static FromArrayCM(arr) {\r\n    return new Mat3(arr[0], arr[3], arr[6],\r\n                    arr[1], arr[4], arr[7],\r\n                    arr[2], arr[5], arr[8]);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Mat3 initialization with an array.\r\n   *\r\n   * Row-Major version.\r\n   *\r\n   * @return {Mat3} the newly created vector\r\n   */\r\n  static FromArrayRM(arr) {\r\n    return new Mat3(arr[0], arr[1], arr[2],\r\n                    arr[3], arr[4], arr[5],\r\n                    arr[6], arr[7], arr[8]);\r\n  }\r\n\r\n  /**\r\n   * Retrieve a row from the Mat3 as a Vec3.\r\n   *\r\n   * @param {number} index the index of the row\r\n   *\r\n   * @return {Vec3} the selected row\r\n   */\r\n  row(index) {\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(this.values[0 + index],\r\n                    this.values[3 + index],\r\n                    this.values[6 + index]);\r\n  }\r\n\r\n  /**\r\n   * Retrieve a col from the Mat3 as a Vec3.\r\n   *\r\n   * @param {number} index the index of the column\r\n   *\r\n   * @return {Vec3} the selected column\r\n   */\r\n  col(index) {\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(this.values[index * 3 + 0],\r\n                    this.values[index * 3 + 1],\r\n                    this.values[index * 3 + 2]);\r\n  }\r\n\r\n  /**\r\n   * Apply the transformation to the Mat3.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {Mat3} mat the matrix to apply\r\n   *\r\n   * @return {Mat3} this\r\n   */\r\n  apply(mat) {\r\n    const v00 = this.values[0];\r\n    const v10 = this.values[1];\r\n    const v20 = this.values[2];\r\n    \r\n    const v01 = this.values[3];\r\n    const v11 = this.values[4];\r\n    const v21 = this.values[5];\r\n\r\n    const v02 = this.values[6];\r\n    const v12 = this.values[7];\r\n    const v22 = this.values[8];\r\n    \r\n    for (let i = 0; i < 3; ++i) {\r\n      const mat0 = mat.values[i * 3 + 0];\r\n      const mat1 = mat.values[i * 3 + 1];\r\n      const mat2 = mat.values[i * 3 + 2];\r\n    \r\n      this.values[i * 3 + 0] = mat0 * v00 + mat1 * v01 + mat2 * v02;\r\n      this.values[i * 3 + 1] = mat0 * v10 + mat1 * v11 + mat2 * v12;\r\n      this.values[i * 3 + 2] = mat0 * v20 + mat1 * v21 + mat2 * v22;\r\n    }\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Apply the translation to the Mat3.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {Vec2} vec the translation to apply\r\n   *\r\n   * @return {Mat3} this\r\n   */\r\n  translate(vec) {\r\n    this.values[6] += vec.x * this.values[0]\r\n                    + vec.y * this.values[3];\r\n    \r\n    this.values[7] += vec.x * this.values[1]\r\n                    + vec.y * this.values[4];\r\n\r\n    this.values[8] += vec.x * this.values[2]\r\n                    + vec.y * this.values[5];\r\n      \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Apply the scale to the Mat3.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {Vec2} vec the scale to apply\r\n   *\r\n   * @return {Mat3} this\r\n   */\r\n  scale(vec) {    \r\n    this.values[0] *= vec.x;\r\n    this.values[1] *= vec.x;\r\n    this.values[2] *= vec.x;  \r\n    \r\n    this.values[3] *= vec.y;\r\n    this.values[4] *= vec.y;\r\n    this.values[5] *= vec.y;\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Apply the rotation to the Mat3.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {number} ang the angle to rotate (in radians)\r\n   *\r\n   * @return {Mat3} this\r\n   */\r\n  rotate(ang) {\r\n    const v00 = this.values[0];\r\n    const v10 = this.values[1];\r\n    const v20 = this.values[2];\r\n    \r\n    const v01 = this.values[3];\r\n    const v11 = this.values[4];\r\n    const v21 = this.values[5];\r\n\r\n    const v02 = this.values[6];\r\n    const v12 = this.values[7];\r\n    const v22 = this.values[8];\r\n\r\n    const s = Math.sin(ang);\r\n    const c = Math.cos(ang);\r\n\r\n    this.values[0] = c * v00 + s * v01;\r\n    this.values[1] = c * v10 + s * v11;\r\n    this.values[2] = c * v20 + s * v21;\r\n  \r\n    this.values[3] = c * v01 - s * v00;\r\n    this.values[4] = c * v11 - s * v10;\r\n    this.values[5] = c * v21 - s * v20;\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Compute the determinant of the Mat3.\r\n   *\r\n   * @return {number} the determinant\r\n   */\r\n  det() {\r\n    const v00 = this.values[0];\r\n    const v10 = this.values[1];\r\n    const v20 = this.values[2];\r\n    \r\n    const v01 = this.values[3];\r\n    const v11 = this.values[4];\r\n    const v21 = this.values[5];\r\n\r\n    const v02 = this.values[6];\r\n    const v12 = this.values[7];\r\n    const v22 = this.values[8];\r\n\r\n    return v00 * ( v22 * v11 - v21 * v12)\r\n         + v10 * (-v22 * v01 + v21 * v02)\r\n         + v20 * ( v12 * v01 - v11 * v02)\r\n  }\r\n\r\n  /**\r\n   * Compute the inverse of the Mat3.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @throws Error when det() is 0\r\n   *\r\n   * @return {Mat3} this\r\n   */\r\n  inverse() {\r\n    const v00 = this.values[0];\r\n    const v10 = this.values[1];\r\n    const v20 = this.values[2];\r\n    \r\n    const v01 = this.values[3];\r\n    const v11 = this.values[4];\r\n    const v21 = this.values[5];\r\n\r\n    const v02 = this.values[6];\r\n    const v12 = this.values[7];\r\n    const v22 = this.values[8];\r\n    \r\n    const tmp0 =  v22 * v11 - v21 * v12;\r\n    const tmp1 = -v22 * v01 + v21 * v02;\r\n    const tmp2 =  v12 * v01 - v11 * v02;\r\n\r\n    var det = v00 * tmp0 + v10 * tmp1 + v20 * tmp2;\r\n\r\n    if (det === 0) throw new Error(\"Unable to inverse matrix if det is zero\");    \r\n\r\n    det = 1.0 / det;\r\n\r\n    this.values[0] = tmp0 * det;\r\n    this.values[1] = (-v22 * v10 + v20 * v12) * det;\r\n    this.values[2] = ( v21 * v10 - v20 * v11) * det;\r\n    this.values[3] = tmp1 * det;\r\n    this.values[4] = ( v22 * v00 - v20 * v02) * det;\r\n    this.values[5] = (-v21 * v00 + v20 * v01) * det;\r\n    this.values[6] = tmp2 * det;\r\n    this.values[7] = (-v12 * v00 + v10 * v02) * det;\r\n    this.values[8] = ( v11 * v00 - v10 * v01) * det;\r\n    \r\n    return this;\r\n  }\r\n}\n\n//# sourceURL=webpack:///../../lib/math/mat3.js?");

/***/ }),

/***/ "../../lib/math/mat4.js":
/*!******************************!*\
  !*** ../../lib/math/mat4.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Mat4\": () => (/* binding */ Mat4)\n/* harmony export */ });\n/* harmony import */ var _mat_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mat.js */ \"../../lib/math/mat.js\");\n/* harmony import */ var _all_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../all.js */ \"../../lib/all.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\n\r\n/**\r\n * @class Mat representing a 4x4 matrix.\r\n */\r\nclass Mat4 extends _mat_js__WEBPACK_IMPORTED_MODULE_0__.Mat {\r\n  /**\r\n   * Creates an instance of a Mat4.\r\n   *\r\n   * @param {number, number, number, number} the first row\r\n   * @param {number, number, number, number} the second row\r\n   * @param {number, number, number, number} the third row\r\n   * @param {number, number, number, number} the fourth row\r\n   */\r\n  constructor(x_r1, y_r1, z_r1, w_r1,\r\n              x_r2, y_r2, z_r2, w_r2,\r\n              x_r3, y_r3, z_r3, w_r3,\r\n              x_r4, y_r4, z_r4, w_r4) {\r\n    super([x_r1, x_r2, x_r3, x_r4,\r\n           y_r1, y_r2, y_r3, y_r4,\r\n           z_r1, z_r2, z_r3, z_r4,\r\n           w_r1, w_r2, w_r3, w_r4]);\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve elements count.\r\n   * \r\n   * @return {number} the num of elements\r\n   */\r\n  static count() {\r\n    return 16;\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve side count.\r\n   * \r\n   * @return {number} the num of elements on the side of the matrix\r\n   */\r\n  static side() {\r\n    return 4;\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Mat4 initialization with an array.\r\n   *\r\n   * Column-Major version.\r\n   *\r\n   * @return {Mat4} the newly created vector\r\n   */\r\n  static FromArrayCM(arr) {\r\n    return new Mat4(arr[ 0], arr[ 4], arr[ 8], arr[12],\r\n                    arr[ 1], arr[ 5], arr[ 9], arr[13],\r\n                    arr[ 2], arr[ 6], arr[10], arr[14],\r\n                    arr[ 3], arr[ 7], arr[11], arr[15]);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Mat4 initialization with an array.\r\n   *\r\n   * Row-Major version.\r\n   *\r\n   * @return {Mat4} the newly created vector\r\n   */\r\n  static FromArrayRM(arr) {\r\n    return new Mat4(arr[ 0], arr[ 1], arr[ 2], arr[ 3],\r\n                    arr[ 4], arr[ 5], arr[ 6], arr[ 7],\r\n                    arr[ 8], arr[ 9], arr[10], arr[11],\r\n                    arr[12], arr[13], arr[14], arr[15]);\r\n  }\r\n\r\n  /**\r\n   * Retrieve a row from the Mat4 as a Vec4.\r\n   *\r\n   * @param {number} index the index of the row\r\n   *\r\n   * @return {Vec4} the selected row\r\n   */\r\n  row(index) {\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_1__.Vec4(this.values[ 0 + index],\r\n                    this.values[ 4 + index],\r\n                    this.values[ 8 + index],\r\n                    this.values[12 + index]);\r\n  }\r\n\r\n  /**\r\n   * Retrieve a col from the Mat4 as a Vec4.\r\n   *\r\n   * @param {number} index the index of the column\r\n   *\r\n   * @return {Vec4} the selected column\r\n   */\r\n  col(index) {\r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_1__.Vec4(this.values[index * 4 + 0],\r\n                    this.values[index * 4 + 1],\r\n                    this.values[index * 4 + 2],\r\n                    this.values[index * 4 + 3]);\r\n  }\r\n\r\n  /**\r\n   * Apply the transformation to the Mat4.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {Mat4} mat the matrix to apply\r\n   *\r\n   * @return {Mat4} this\r\n   */\r\n  apply(mat) {\r\n    const v00 = this.values[ 0];\r\n    const v10 = this.values[ 1];\r\n    const v20 = this.values[ 2];\r\n    const v30 = this.values[ 3];\r\n    \r\n    const v01 = this.values[ 4];\r\n    const v11 = this.values[ 5];\r\n    const v21 = this.values[ 6];\r\n    const v31 = this.values[ 7];\r\n    \r\n    const v02 = this.values[ 8];\r\n    const v12 = this.values[ 9];\r\n    const v22 = this.values[10];\r\n    const v32 = this.values[11];\r\n    \r\n    const v03 = this.values[12];\r\n    const v13 = this.values[13];\r\n    const v23 = this.values[14];\r\n    const v33 = this.values[15];\r\n\r\n    for (let i = 0; i < 4; ++i) {\r\n      const mat0 = mat.values[i * 4 + 0];\r\n      const mat1 = mat.values[i * 4 + 1];\r\n      const mat2 = mat.values[i * 4 + 2];\r\n      const mat3 = mat.values[i * 4 + 3];\r\n      \r\n      this.values[i * 4 + 0] = mat0 * v00 + mat1 * v01 + mat2 * v02 + mat3 * v03;\r\n      this.values[i * 4 + 1] = mat0 * v10 + mat1 * v11 + mat2 * v12 + mat3 * v13;\r\n      this.values[i * 4 + 2] = mat0 * v20 + mat1 * v21 + mat2 * v22 + mat3 * v23;\r\n      this.values[i * 4 + 3] = mat0 * v30 + mat1 * v31 + mat2 * v32 + mat3 * v33;\r\n    }\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Apply the translation to the Mat4.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {Vec3} vec the translation to apply\r\n   *\r\n   * @return {Mat4} this\r\n   */\r\n  translate(vec) {\r\n    this.values[12] += this.values[ 0] * vec.x\r\n                     + this.values[ 4] * vec.y\r\n                     + this.values[ 8] * vec.z;\r\n    \r\n    this.values[13] += this.values[ 1] * vec.x\r\n                     + this.values[ 5] * vec.y\r\n                     + this.values[ 9] * vec.z;\r\n    \r\n    this.values[14] += this.values[ 2] * vec.x\r\n                     + this.values[ 6] * vec.y\r\n                     + this.values[10] * vec.z;\r\n    \r\n    this.values[15] += this.values[ 3] * vec.x\r\n                     + this.values[ 7] * vec.y\r\n                     + this.values[11] * vec.z;\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Apply the scale to the Mat4.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {Vec3} vec the scale to apply\r\n   *\r\n   * @return {Mat4} this\r\n   */\r\n  scale(vec) {\r\n    this.values[ 0] *= vec.x;\r\n    this.values[ 1] *= vec.x;\r\n    this.values[ 2] *= vec.x;\r\n    this.values[ 3] *= vec.x;\r\n    \r\n    this.values[ 4] *= vec.y;\r\n    this.values[ 5] *= vec.y;\r\n    this.values[ 6] *= vec.y;\r\n    this.values[ 7] *= vec.y;\r\n    \r\n    this.values[ 8] *= vec.z;\r\n    this.values[ 9] *= vec.z;\r\n    this.values[10] *= vec.z;\r\n    this.values[11] *= vec.z;\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Apply the rotation to the Mat4.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {number} ang the angle to rotate (in radians)\r\n   * @param {Vec3} vec the NORMALIZED axis to rotate around\r\n   *\r\n   * @return {Mat4} this\r\n   */\r\n  rotate(ang, vec) {\r\n    const s = Math.sin(ang);\r\n    const c = Math.cos(ang);\r\n    const t = 1 - c;\r\n    \r\n    const v00 = this.values[ 0];\r\n    const v10 = this.values[ 1];\r\n    const v20 = this.values[ 2];\r\n    const v30 = this.values[ 3];\r\n    \r\n    const v01 = this.values[ 4];\r\n    const v11 = this.values[ 5];\r\n    const v21 = this.values[ 6];\r\n    const v31 = this.values[ 7];\r\n    \r\n    const v02 = this.values[ 8];\r\n    const v12 = this.values[ 9];\r\n    const v22 = this.values[10];\r\n    const v32 = this.values[11];\r\n\r\n    const r00 = vec.x * vec.x * t + c;\r\n    const r01 = vec.y * vec.x * t + vec.z * s;\r\n    const r02 = vec.z * vec.x * t - vec.y * s;\r\n    const r10 = vec.x * vec.y * t - vec.z * s;\r\n    const r11 = vec.y * vec.y * t + c;\r\n    const r12 = vec.z * vec.y * t + vec.x * s;\r\n    const r20 = vec.x * vec.z * t + vec.y * s;\r\n    const r21 = vec.y * vec.z * t - vec.x * s;\r\n    const r22 = vec.z * vec.z * t + c;\r\n\r\n    this.values[ 0] = v00 * r00 + v01 * r01 + v02 * r02;\r\n    this.values[ 1] = v10 * r00 + v11 * r01 + v12 * r02;\r\n    this.values[ 2] = v20 * r00 + v21 * r01 + v22 * r02;\r\n    this.values[ 3] = v30 * r00 + v31 * r01 + v32 * r02;\r\n    \r\n    this.values[ 4] = v00 * r10 + v01 * r11 + v02 * r12;\r\n    this.values[ 5] = v10 * r10 + v11 * r11 + v12 * r12;\r\n    this.values[ 6] = v20 * r10 + v21 * r11 + v22 * r12;\r\n    this.values[ 7] = v30 * r10 + v31 * r11 + v32 * r12;\r\n    \r\n    this.values[ 8] = v00 * r20 + v01 * r21 + v02 * r22;\r\n    this.values[ 9] = v10 * r20 + v11 * r21 + v12 * r22;\r\n    this.values[10] = v20 * r20 + v21 * r21 + v22 * r22;\r\n    this.values[11] = v30 * r20 + v31 * r21 + v32 * r22;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Compute the determinant of the Mat4.\r\n   *\r\n   * @return {number} the determinant\r\n   */\r\n  det() {\r\n    const v00 = this.values[ 0];\r\n    const v10 = this.values[ 1];\r\n    const v20 = this.values[ 2];\r\n    const v30 = this.values[ 3];\r\n    \r\n    const v01 = this.values[ 4];\r\n    const v11 = this.values[ 5];\r\n    const v21 = this.values[ 6];\r\n    const v31 = this.values[ 7];\r\n    \r\n    const v02 = this.values[ 8];\r\n    const v12 = this.values[ 9];\r\n    const v22 = this.values[10];\r\n    const v32 = this.values[11];\r\n    \r\n    const v03 = this.values[12];\r\n    const v13 = this.values[13];\r\n    const v23 = this.values[14];\r\n    const v33 = this.values[15];\r\n    \r\n    const tmp0 = v00 * v11 - v10 * v01;\r\n    const tmp1 = v00 * v21 - v20 * v01;\r\n    const tmp2 = v10 * v21 - v20 * v11;\r\n    const tmp3 = v02 * v13 - v12 * v03;\r\n    const tmp4 = v02 * v23 - v22 * v03;\r\n    const tmp5 = v12 * v23 - v22 * v13;\r\n\r\n    const tmp6 = v00 * tmp5 - v10 * tmp4 + v20 * tmp3;\r\n    const tmp7 = v01 * tmp5 - v11 * tmp4 + v21 * tmp3;\r\n    const tmp8 = v02 * tmp2 - v12 * tmp1 + v22 * tmp0;\r\n    const tmp9 = v03 * tmp2 - v13 * tmp1 + v23 * tmp0;\r\n\r\n    return v31 * tmp6 - v30 * tmp7 + v33 * tmp8 - v32 * tmp9;\r\n  }\r\n\r\n  /**\r\n   * Compute the inverse of the Mat4.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @throws Error when det() is 0\r\n   *\r\n   * @return {Mat4} this\r\n   */\r\n  inverse() {\r\n    const v00 = this.values[ 0];\r\n    const v10 = this.values[ 1];\r\n    const v20 = this.values[ 2];\r\n    const v30 = this.values[ 3];\r\n    \r\n    const v01 = this.values[ 4];\r\n    const v11 = this.values[ 5];\r\n    const v21 = this.values[ 6];\r\n    const v31 = this.values[ 7];\r\n    \r\n    const v02 = this.values[ 8];\r\n    const v12 = this.values[ 9];\r\n    const v22 = this.values[10];\r\n    const v32 = this.values[11];\r\n    \r\n    const v03 = this.values[12];\r\n    const v13 = this.values[13];\r\n    const v23 = this.values[14];\r\n    const v33 = this.values[15];\r\n\r\n    const tmp0  = v00 * v11 - v10 * v01;\r\n    const tmp1  = v00 * v21 - v20 * v01;\r\n    const tmp2  = v00 * v31 - v30 * v01;\r\n    const tmp3  = v10 * v21 - v20 * v11;\r\n    const tmp4  = v10 * v31 - v30 * v11;\r\n    const tmp5  = v20 * v31 - v30 * v21;\r\n    const tmp6  = v02 * v13 - v12 * v03;\r\n    const tmp7  = v02 * v23 - v22 * v03;\r\n    const tmp8  = v02 * v33 - v32 * v03;\r\n    const tmp9  = v12 * v23 - v22 * v13;\r\n    const tmp10 = v12 * v33 - v32 * v13;\r\n    const tmp11 = v22 * v33 - v32 * v23;\r\n    \r\n    var det = tmp0 * tmp11 - tmp1 * tmp10 + tmp2 * tmp9\r\n            + tmp3 * tmp8  - tmp4 * tmp7  + tmp5 * tmp6;\r\n\r\n    if (det === 0) throw new Error(\"Unable to inverse matrix if det is zero\");    \r\n\r\n    det = 1.0 / det;\r\n\r\n    this.values[ 0] = (v11 * tmp11 - v21 * tmp10 + v31 * tmp9 ) * det;\r\n    this.values[ 1] = (v20 * tmp10 - v10 * tmp11 - v30 * tmp9 ) * det;\r\n    this.values[ 2] = (v13 * tmp5  - v23 * tmp4  + v33 * tmp3 ) * det;\r\n    this.values[ 3] = (v22 * tmp4  - v12 * tmp5  - v32 * tmp3 ) * det;\r\n    this.values[ 4] = (v21 * tmp8  - v01 * tmp11 - v31 * tmp7 ) * det;\r\n    this.values[ 5] = (v00 * tmp11 - v20 * tmp8  + v30 * tmp7 ) * det;\r\n    this.values[ 6] = (v23 * tmp2  - v03 * tmp5  - v33 * tmp1 ) * det;\r\n    this.values[ 7] = (v02 * tmp5  - v22 * tmp2  + v32 * tmp1 ) * det;\r\n    this.values[ 8] = (v01 * tmp10 - v11 * tmp8  + v31 * tmp6 ) * det;\r\n    this.values[ 9] = (v10 * tmp8  - v00 * tmp10 - v30 * tmp6 ) * det;\r\n    this.values[10] = (v03 * tmp4  - v13 * tmp2  + v33 * tmp0 ) * det;\r\n    this.values[11] = (v12 * tmp2  - v02 * tmp4  - v32 * tmp0 ) * det;\r\n    this.values[12] = (v11 * tmp7  - v01 * tmp9  - v21 * tmp6 ) * det;\r\n    this.values[13] = (v00 * tmp9  - v10 * tmp7  + v20 * tmp6 ) * det;\r\n    this.values[14] = (v13 * tmp1  - v03 * tmp3  - v23 * tmp0 ) * det;\r\n    this.values[15] = (v02 * tmp3  - v12 * tmp1  + v22 * tmp0 ) * det;\r\n\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Create the LookAt matrix.\r\n   *\r\n   * @param {Vec3} from the source point\r\n   * @param {Vec3} to the target point\r\n   * @param {Vec3} up the up direction\r\n   *\r\n   * @return {Mat} the newly created Mat4\r\n   */\r\n  static LookAt(from, to, up) {\r\n    if (from.equals(to)) return Mat4.identity();\r\n\r\n    const z = from.clone().sub(to).normalize();\r\n    const x = up.clone().cross(z).normalize();\r\n    const y = z.clone().cross(x).normalize();\r\n    \r\n    const arr = new Array(16);\r\n\r\n    arr[ 0] = x.x;\r\n    arr[ 1] = y.x;\r\n    arr[ 2] = z.x;\r\n    arr[ 3] = 0;\r\n    \r\n    arr[ 4] = x.y;\r\n    arr[ 5] = y.y;\r\n    arr[ 6] = z.y;\r\n    arr[ 7] = 0;\r\n\r\n    arr[ 8] = x.z;\r\n    arr[ 9] = y.z;\r\n    arr[10] = z.z;\r\n    arr[11] = 0;\r\n    \r\n    arr[12] = -x.dot(from);\r\n    arr[13] = -y.dot(from);\r\n    arr[14] = -z.dot(from);\r\n    arr[15] = 1;\r\n    \r\n    return Mat4.FromArrayCM(arr);\r\n  }\r\n  \r\n  /**\r\n   * Create the Perspective matrix.\r\n   *\r\n   * @param {number} fovY the field of view (in radians)\r\n   * @param {number} ratio the aspect ratio (typically w/h)\r\n   * @param {number} near the near Plane\r\n   * @param {number} far the far Plane\r\n   *\r\n   * @return {Mat} the newly created Mat4\r\n   */\r\n  static Perspective(fovY, ratio, near, far) {\r\n    const f = 1.0 / Math.tan(fovY / 2);\r\n    \r\n    const arr = new Array(16);\r\n    \r\n    arr[ 0] = f / ratio;\r\n    arr[ 1] = 0;\r\n    arr[ 2] = 0;\r\n    arr[ 3] = 0;\r\n    \r\n    arr[ 4] = 0;\r\n    arr[ 5] = f;\r\n    arr[ 6] = 0;\r\n    arr[ 7] = 0;\r\n\r\n    arr[ 8] = 0;\r\n    arr[ 9] = 0;\r\n    // arr[10]\r\n    arr[11] = -1;\r\n    \r\n    arr[12] = 0;\r\n    arr[13] = 0;\r\n    // arr[14]\r\n    arr[15] = 0;\r\n\r\n    if (f !== Number.Infinity) {\r\n      const nf = 1 / (near - far);\r\n      arr[10] = (far + near) * nf;\r\n      arr[14] = 2 * far * near * nf;\r\n    } else {\r\n      arr[10] = -1;\r\n      arr[14] = -2 * near;\r\n    }\r\n    \r\n    return Mat4.FromArrayCM(arr);\r\n  }\r\n}\n\n//# sourceURL=webpack:///../../lib/math/mat4.js?");

/***/ }),

/***/ "../../lib/math/utils.js":
/*!*******************************!*\
  !*** ../../lib/math/utils.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toDeg\": () => (/* binding */ toDeg),\n/* harmony export */   \"toRad\": () => (/* binding */ toRad)\n/* harmony export */ });\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\nconst DEG_TO_RAD = Math.PI / 180.0;\r\nconst RAD_TO_DEG = 180.0 / Math.PI;\r\n\r\n/**\r\n * Convert from degrees to radians.\r\n * \r\n * @param {number} degrees the value to convert\r\n * \r\n * @return {number} the radians equivalent\r\n */\r\nfunction toRad(degrees) {\r\n  return (degrees % 360) * DEG_TO_RAD;\r\n}\r\n\r\n/**\r\n * Convert from radians to degrees.\r\n * \r\n * @param {number} radians the value to convert\r\n * \r\n * @return {number} the radians equivalent\r\n */\r\nfunction toDeg(radians) {\r\n  return (radians * RAD_TO_DEG) % 360;\r\n}\r\n\n\n//# sourceURL=webpack:///../../lib/math/utils.js?");

/***/ }),

/***/ "../../lib/math/vec.js":
/*!*****************************!*\
  !*** ../../lib/math/vec.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vec\": () => (/* binding */ Vec)\n/* harmony export */ });\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n/**\r\n * @class Vec base vector class.\r\n */\r\nclass Vec {\r\n  values;\r\n\r\n  /**\r\n   * Creates an instance of a Vec.\r\n   *\r\n   * @param {array of number} arr the array of values\r\n   */\r\n  constructor(arr) {\r\n    this.values = new Float32Array(arr);\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve elements count.\r\n   * Should be implemented by specialized classes.\r\n   * \r\n   * @return {number} the num of elements\r\n   */\r\n  static count() {\r\n    throw new Error(\"count() not implemented\");\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec initialization from array.\r\n   * Should be implemented by specialized classes.\r\n   * \r\n   * @param {array of number} arr the array to copy\r\n   * \r\n   * @return {Vec} the newly created vector\r\n   */\r\n  static FromArray(arr) {\r\n    throw new Error(\"FromArray() not implemented\");\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve a string representing the Vec instance.\r\n   * \r\n   * @return {string} string representation\r\n   */\r\n  toString(decimal = 20) {\r\n    return \"[\" + [...this.values].map((v) => v.toFixed(decimal)).join(\",\") + \"]\";\r\n  }\r\n\r\n  /**\r\n   * Compare the two Vec.\r\n   *\r\n   * @param {Vec} vec the vector to compare\r\n   *\r\n   * @return {boolean} if the Vec are equals\r\n   */\r\n  equals(vec) {\r\n    for (let i = 0; i < this.constructor.count(); ++i)\r\n      if (this.values[i] !== vec.values[i])\r\n        return false;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sum to the Vec another Vec.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {Vec} vec the vector to sum\r\n   *\r\n   * @return {Vec} this\r\n   */\r\n  add(vec) {\r\n    for (let i = 0; i < this.constructor.count(); ++i)\r\n      this.values[i] += vec.values[i];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Subtract to the Vec another Vec.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {Vec} vec the vector to subtract\r\n   *\r\n   * @return {Vec} this\r\n   */\r\n  sub(vec) {\r\n    for (let i = 0; i < this.constructor.count(); ++i)\r\n      this.values[i] -= vec.values[i];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Scale up the Vec by a factor.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {number} factor the scale\r\n   *\r\n   * @return {Vec} this\r\n   */\r\n  mul(factor) {\r\n    for (let i = 0; i < this.constructor.count(); ++i)\r\n      this.values[i] *= factor;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Scale down the Vec by a factor.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {number} factor the scale\r\n   *\r\n   * @return {Vec} this\r\n   */\r\n  div(factor) {\r\n    for (let i = 0; i < this.constructor.count(); ++i)\r\n      this.values[i] /= factor;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Round the Vec.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {number} decimal the rounding precision\r\n   *\r\n   * @return {Vec} this\r\n   */\r\n  round(decimal) {\r\n    for (let i = 0; i < this.constructor.count(); ++i)\r\n      this.values[i] = this.values[i].toFixed(decimal);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Floor the Vec.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @return {Vec} this\r\n   */\r\n  floor() {\r\n    for (let i = 0; i < this.constructor.count(); ++i)\r\n      this.values[i] = Math.floor(this.values[i]);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Normalize the Vec.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @return {Vec} this\r\n   */\r\n  normalize() {\r\n    return this.div(this.magnitude());\r\n  }\r\n\r\n  /**\r\n   * Inverse the Vec.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @return {Vec} this\r\n   */\r\n  inverse() {\r\n    for (let i = 0; i < this.constructor.count(); ++i)\r\n      this.values[i] = 1 / this.values[i];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Negate the Vec.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @return {Vec} this\r\n   */\r\n  negate() {\r\n    for (let i = 0; i < this.constructor.count(); ++i)\r\n      this.values[i] = -this.values[i];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Compute the dot product between Vec.\r\n   *\r\n   * @param {Vec} vec the vector to multiply\r\n   *\r\n   * @return {number} the result of the computation\r\n   */\r\n  dot(vec) {\r\n    let sum = 0;\r\n    for (let i = 0; i < this.constructor.count(); ++i)\r\n      sum += this.values[i] * vec.values[i];\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   * Compute the length of the Vec.\r\n   *\r\n   * @return {number} the length\r\n   */\r\n  magnitude() {\r\n    return Math.sqrt(this.magnitudeSquared());\r\n  }\r\n\r\n  /**\r\n   * Compute the length squared of the Vec.\r\n   *\r\n   * Transform the Vec by a Mat.\r\n   *\r\n   * @return {number} the length squared\r\n   */\r\n  magnitudeSquared() {\r\n    return this.dot(this);\r\n  }\r\n\r\n  /**\r\n   * Transform the Vec by a Mat.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {Mat} mat the matrix to apply\r\n   *\r\n   * @return {Vec} this\r\n   */\r\n  transform(mat) {\r\n    const tmp = this.clone();\r\n    for (let i = 0; i < this.constructor.count(); ++i) {\r\n      this.values[i] = mat.row(i).dot(tmp);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec clone.\r\n   * \r\n   * @return {Vec} the newly created vector\r\n   */\r\n  clone() {\r\n    return this.constructor.FromArray(this.values);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec initialization with equal values.\r\n   * \r\n   * @param {number} v the value to be used for every coordinate\r\n   * \r\n   * @return {Vec} the newly created vector\r\n   */\r\n  static All(v) {\r\n    return this.FromArray(new Array(this.count()).fill(v));\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec initialization with zeros.\r\n   *\r\n   * @return {Vec} the newly created vector\r\n   */\r\n  static Zeros() {\r\n    return this.All(0);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec initialization with ones.\r\n   *\r\n   * @return {Vec} the newly created vector\r\n   */\r\n  static Ones() {\r\n    return this.All(1);\r\n  }\r\n}\n\n//# sourceURL=webpack:///../../lib/math/vec.js?");

/***/ }),

/***/ "../../lib/math/vec2.js":
/*!******************************!*\
  !*** ../../lib/math/vec2.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vec2\": () => (/* binding */ Vec2)\n/* harmony export */ });\n/* harmony import */ var _vec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vec.js */ \"../../lib/math/vec.js\");\n/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vec3.js */ \"../../lib/math/vec3.js\");\n/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec4.js */ \"../../lib/math/vec4.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @class Vec2 representing a vector with 2 dimensions.\r\n */\r\nclass Vec2 extends _vec_js__WEBPACK_IMPORTED_MODULE_0__.Vec {  \r\n  /**\r\n   * Creates an instance of a Vec2.\r\n   *\r\n   * @param {number} the x coordinate\r\n   * @param {number} the y coordinate\r\n   */\r\n  constructor(x, y) {\r\n    super([x, y]);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec3 initialization from a Vec2.\r\n   *\r\n   * @param {number} z the z coordinate\r\n   *\r\n   * @return {Vec3} the newly created vector\r\n   */\r\n  toVec3(z) {\r\n    return new _vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(this.x, this.y, z);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec4 initialization from a Vec2.\r\n   *\r\n   * @param {number} z the z coordinate\r\n   * @param {number} w the w coordinate\r\n   *\r\n   * @return {Vec4} the newly created vector\r\n   */\r\n  toVec4(z, w) {\r\n    return new _vec4_js__WEBPACK_IMPORTED_MODULE_2__.Vec4(this.x, this.y, z, w);\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve elements count.\r\n   * \r\n   * @return {number} the num of elements\r\n   */\r\n  static count() {\r\n    return 2;\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec2 initialization with an array.\r\n   *\r\n   * @return {Vec2} the newly created vector\r\n   */\r\n  static FromArray(arr) {\r\n    return new Vec2(arr[0], arr[1]);\r\n  }\r\n\r\n  /**\r\n   * Setter to update the x or y coordinate.\r\n   * \r\n   * @param {number} the new value\r\n   */\r\n  set x(value) { this.values[0] = value; }\r\n  set y(value) { this.values[1] = value; }\r\n\r\n  // Syntactic sugar to support \"size\" accessors as coordinates\r\n  set w(value) { this.values[0] = value; }\r\n  set h(value) { this.values[1] = value; }\r\n\r\n  // Syntactic sugar to support \"texture\" accessors as coordinates\r\n  set u(value) { this.values[0] = value; }\r\n  set v(value) { this.values[1] = value; }\r\n\r\n  /**\r\n   * Getter to retrieve the x or y coordinate.\r\n   * \r\n   * @return {number} the selected coordinate\r\n   */\r\n  get x() { return this.values[0]; }\r\n  get y() { return this.values[1]; }\r\n  \r\n  // Syntactic sugar to support \"size\" accessors as coordinates\r\n  get w() { return this.values[0]; }\r\n  get h() { return this.values[1]; }\r\n\r\n  // Syntactic sugar to support \"texture\" accessors as coordinates\r\n  get u() { return this.values[0]; }\r\n  get v() { return this.values[1]; }\r\n}\n\n//# sourceURL=webpack:///../../lib/math/vec2.js?");

/***/ }),

/***/ "../../lib/math/vec3.js":
/*!******************************!*\
  !*** ../../lib/math/vec3.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vec3\": () => (/* binding */ Vec3)\n/* harmony export */ });\n/* harmony import */ var _vec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vec.js */ \"../../lib/math/vec.js\");\n/* harmony import */ var _vec2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vec2.js */ \"../../lib/math/vec2.js\");\n/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec4.js */ \"../../lib/math/vec4.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @class Vec3 representing a vector with 3 dimensions.\r\n */\r\nclass Vec3 extends _vec_js__WEBPACK_IMPORTED_MODULE_0__.Vec {  \r\n  /**\r\n   * Creates an instance of a Vec3.\r\n   *\r\n   * @param {number} the x coordinate\r\n   * @param {number} the y coordinate\r\n   * @param {number} the z coordinate\r\n   */\r\n  constructor(x, y, z) {\r\n    super([x, y, z]);\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve elements count.\r\n   * \r\n   * @return {number} the num of elements\r\n   */\r\n  static count() {\r\n    return 3;\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec3 initialization with an array.\r\n   *\r\n   * @return {Vec3} the newly created vector\r\n   */\r\n  static FromArray(arr) {\r\n    return new Vec3(arr[0], arr[1], arr[2]);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec2 initialization from a Vec3.\r\n   *\r\n   * @return {Vec2} the newly created vector\r\n   */\r\n  toVec2() {\r\n    return new _vec2_js__WEBPACK_IMPORTED_MODULE_1__.Vec2(this.x, this.y);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec4 initialization from a Vec3.\r\n   *\r\n   * @param {number} w the w coordinate\r\n   *\r\n   * @return {Vec4} the newly created vector\r\n   */\r\n  toVec4(w) {\r\n    return new _vec4_js__WEBPACK_IMPORTED_MODULE_2__.Vec4(this.x, this.y, this.z, w);\r\n  }\r\n\r\n  /**\r\n   * Setter to update the x, y or z coordinate.\r\n   * \r\n   * @param {number} the new value\r\n   */\r\n  set x(value) { this.values[0] = value; }\r\n  set y(value) { this.values[1] = value; }\r\n  set z(value) { this.values[2] = value; }\r\n\r\n  // Syntactic sugar to support \"color\" channels as coordinates\r\n  set r(value) { this.values[0] = value; }\r\n  set g(value) { this.values[1] = value; }\r\n  set b(value) { this.values[2] = value; }\r\n\r\n  // Syntactic sugar to support \"color\" channels as coordinates\r\n  set h(value) { this.values[0] = value; }\r\n  set s(value) { this.values[1] = value; }\r\n  set v(value) { this.values[2] = value; }\r\n\r\n  /**\r\n   * Getter to retrieve the x, y or z coordinate.\r\n   * \r\n   * @return {number} the selected coordinate\r\n   */\r\n  get x() { return this.values[0]; }\r\n  get y() { return this.values[1]; }\r\n  get z() { return this.values[2]; }\r\n  \r\n  // Syntactic sugar to support \"color\" channels as coordinates\r\n  get r() { return this.values[0]; }\r\n  get g() { return this.values[1]; }\r\n  get b() { return this.values[2]; }\r\n  \r\n  // Syntactic sugar to support \"color\" channels as coordinates\r\n  get h() { return this.values[0]; }\r\n  get s() { return this.values[1]; }\r\n  get v() { return this.values[2]; }\r\n\r\n  /**\r\n   * Compute the cross product with another vector.\r\n   * Operations can be concatenated.\r\n   *\r\n   * @param {Vec3} vec the vector to multiply\r\n   *\r\n   * @return {Vec3} this\r\n   */\r\n  cross(vec) {\r\n    const v0 = this.values[0];\r\n    const v1 = this.values[1];\r\n    const v2 = this.values[2];\r\n\r\n    this.values[0] = (v1 * vec.z) - (v2 * vec.y);\r\n    this.values[1] = (v2 * vec.x) - (v0 * vec.z);\r\n    this.values[2] = (v0 * vec.y) - (v1 * vec.x);\r\n    \r\n    return this;\r\n  }\r\n\r\n  /*\r\n   * Calculate texture uvs of sphere with Vec3 as point.\r\n   *\r\n   * Should be normalized.\r\n   *\r\n   * @return {Vec2} the uv coordinates\r\n   */\r\n  toUVofSphere() {\r\n    const u = (Math.atan2(this.values[0], this.values[2]) / Math.PI) / 2 + 0.5;\r\n    const v = (Math.asin(-this.values[1]) / (Math.PI / 2)) / 2 + 0.5;\r\n    return new _vec2_js__WEBPACK_IMPORTED_MODULE_1__.Vec2(u, v);\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack:///../../lib/math/vec3.js?");

/***/ }),

/***/ "../../lib/math/vec4.js":
/*!******************************!*\
  !*** ../../lib/math/vec4.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vec4\": () => (/* binding */ Vec4)\n/* harmony export */ });\n/* harmony import */ var _vec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vec.js */ \"../../lib/math/vec.js\");\n/* harmony import */ var _vec2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vec2.js */ \"../../lib/math/vec2.js\");\n/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec3.js */ \"../../lib/math/vec3.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @class Vec4 representing a vector with 4 dimensions.\r\n */\r\nclass Vec4 extends _vec_js__WEBPACK_IMPORTED_MODULE_0__.Vec {\r\n  /**\r\n   * Creates an instance of a Vec4.\r\n   *\r\n   * @param {number} the x coordinate\r\n   * @param {number} the y coordinate\r\n   * @param {number} the z coordinate\r\n   * @param {number} the w coordinate\r\n   */\r\n  constructor(x, y, z, w) {\r\n    super([x, y, z, w]);\r\n  }\r\n\r\n  /**\r\n   * Getter to retrieve elements count.\r\n   * \r\n   * @return {number} the num of elements\r\n   */\r\n  static count() {\r\n    return 4;\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec4 initialization with an array.\r\n   *\r\n   * @return {Vec4} the newly created vector\r\n   */\r\n  static FromArray(arr) {\r\n    return new Vec4(arr[0], arr[1], arr[2], arr[3]);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec2 initialization from a Vec4.\r\n   *\r\n   * @return {Vec2} the newly created vector\r\n   */\r\n  toVec2() {\r\n    return new _vec2_js__WEBPACK_IMPORTED_MODULE_1__.Vec2(this.x, this.y);\r\n  }\r\n\r\n  /**\r\n   * Syntactic-sugar for a Vec3 initialization from a Vec4.\r\n   *\r\n   * @return {Vec3} the newly created vector\r\n   */\r\n  toVec3() {\r\n    return new _vec3_js__WEBPACK_IMPORTED_MODULE_2__.Vec3(this.x, this.y, this.z);\r\n  }\r\n\r\n  /**\r\n   * Setter to update the x, y, z or w coordinate.\r\n   * \r\n   * @param {number} the new value\r\n   */\r\n  set x(value) { this.values[0] = value; }\r\n  set y(value) { this.values[1] = value; }\r\n  set z(value) { this.values[2] = value; }\r\n  set w(value) { this.values[3] = value; }\r\n\r\n  // Syntactic sugar to support \"color\" channels as coordinates\r\n  set r(value) { this.values[0] = value; }\r\n  set g(value) { this.values[1] = value; }\r\n  set b(value) { this.values[2] = value; }\r\n  set a(value) { this.values[3] = value; }\r\n\r\n  /**\r\n   * Getter to retrieve the x, y, z or w coordinate.\r\n   * \r\n   * @return {number} the selected coordinate\r\n   */\r\n  get x() { return this.values[0]; }\r\n  get y() { return this.values[1]; }\r\n  get z() { return this.values[2]; }\r\n  get w() { return this.values[3]; }\r\n  \r\n  // Syntactic sugar to support \"color\" channels as coordinates\r\n  get r() { return this.values[0]; }\r\n  get g() { return this.values[1]; }\r\n  get b() { return this.values[2]; }\r\n  get a() { return this.values[3]; }\r\n}\n\n//# sourceURL=webpack:///../../lib/math/vec4.js?");

/***/ }),

/***/ "../../lib/webgl/debug.js":
/*!********************************!*\
  !*** ../../lib/webgl/debug.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Debug\": () => (/* binding */ Debug)\n/* harmony export */ });\n/* harmony import */ var _all_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../all.js */ \"../../lib/all.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\nconst POINTS_VERT_SHADER =\r\n`\r\nattribute vec4 aPosition;\r\nuniform mat4 uMatrix;\r\nuniform float uPointSize;\r\nvoid main(void) {\r\n  gl_Position = uMatrix * aPosition;\r\n  gl_PointSize = uPointSize;\r\n}\r\n`;\r\n\r\nconst POINTS_FRAG_SHADER =\r\n`\r\nprecision highp float;\r\nuniform vec4 uPointColor;\r\nvoid main(void) {\r\n  gl_FragColor = uPointColor;\r\n}\r\n`;\r\n\r\nconst LINES_VERT_SHADER =\r\n`\r\nattribute vec4 aPosition;\r\nuniform mat4 uMatrix;\r\nvoid main(void) {\r\n  gl_Position = uMatrix * aPosition;\r\n}\r\n`;\r\n\r\nconst LINES_FRAG_SHADER =\r\n`\r\nprecision highp float;\r\nuniform vec4 uLineColor;\r\nvoid main(void) {\r\n  gl_FragColor = uLineColor;\r\n}\r\n`;\r\n\r\n/**\r\n * @class Debug wrapping some utilities to debug.\r\n */\r\nclass Debug {\r\n  static #gl;\r\n  static #arrayBuffer;\r\n  static #indexBuffer;\r\n  static #pointsProgram;\r\n  static #linesProgram;\r\n  \r\n  /**\r\n   * Initialize the Debug data.\r\n   *\r\n   * @param {WebGLRenderingContext} gl the webgl context\r\n   */\r\n  static Initialize(gl) {\r\n    Debug.#gl = gl;\r\n\r\n    // Create buffers\r\n    Debug.#arrayBuffer = gl.createBuffer();\r\n    Debug.#indexBuffer = gl.createBuffer();\r\n\r\n    // Debug programs: Points\r\n    Debug.#pointsProgram = new _all_js__WEBPACK_IMPORTED_MODULE_0__.Program(gl);\r\n    Debug.#pointsProgram.attachShader(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Shader(gl, gl.VERTEX_SHADER, POINTS_VERT_SHADER));\r\n    Debug.#pointsProgram.attachShader(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Shader(gl, gl.FRAGMENT_SHADER, POINTS_FRAG_SHADER));\r\n    Debug.#pointsProgram.attributes([[0, \"aPosition\"]]);\r\n    Debug.#pointsProgram.link();\r\n    Debug.#pointsProgram.declareUniforms([\r\n      [\"uMatrix\", \"Matrix4fv\"],\r\n      [\"uPointSize\", \"1f\"],\r\n      [\"uPointColor\", \"4fv\"]\r\n    ]);\r\n    \r\n    // Debug programs: Lines\r\n    Debug.#linesProgram = new _all_js__WEBPACK_IMPORTED_MODULE_0__.Program(gl);\r\n    Debug.#linesProgram.attachShader(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Shader(gl, gl.VERTEX_SHADER, LINES_VERT_SHADER));\r\n    Debug.#linesProgram.attachShader(new _all_js__WEBPACK_IMPORTED_MODULE_0__.Shader(gl, gl.FRAGMENT_SHADER, LINES_FRAG_SHADER));\r\n    Debug.#linesProgram.attributes([[0, \"aPosition\"]]);\r\n    Debug.#linesProgram.link();\r\n    Debug.#linesProgram.declareUniforms([\r\n      [\"uMatrix\", \"Matrix4fv\"],\r\n      [\"uLineColor\", \"4fv\"]\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Draw points with size and color.\r\n   *\r\n   * @param {Float32Array} verteces the verteces data\r\n   * @param {number} vertexSize the size of a vertex\r\n   * @param {Mat4} mat the transformation data\r\n   * @param {number} numPoints the points count\r\n   * @param {Vec4} color the color to use when drawing points\r\n   * @param {number} size the size of a point\r\n   */\r\n  static drawPoints(verteces, vertexSize, mat, numPoints, color, size) {\r\n    // Buffers setup\r\n    Debug.#gl.bindBuffer(Debug.#gl.ARRAY_BUFFER, Debug.#arrayBuffer);\r\n    Debug.#gl.bufferData(Debug.#gl.ARRAY_BUFFER, verteces, Debug.#gl.DYNAMIC_DRAW);\r\n    Debug.#gl.enableVertexAttribArray(0);\r\n    Debug.#gl.vertexAttribPointer(0, 3, Debug.#gl.FLOAT, false, 4 * vertexSize,  0);\r\n    \r\n    // Program setup\r\n    Debug.#pointsProgram.use();\r\n    Debug.#pointsProgram.uMatrix.update(mat.values);\r\n    Debug.#pointsProgram.uPointColor.update(color.values);\r\n    Debug.#pointsProgram.uPointSize.update(size);\r\n\r\n    // Draw\r\n    Debug.#gl.drawArrays(Debug.#gl.POINTS, 0, numPoints);\r\n    \r\n    // End draw\r\n    Debug.#gl.disableVertexAttribArray(0);\r\n    _all_js__WEBPACK_IMPORTED_MODULE_0__.Program.unbind(Debug.#gl);\r\n    Debug.#gl.bindBuffer(Debug.#gl.ARRAY_BUFFER, null);\r\n  }\r\n\r\n  /**\r\n   * Draw lines with size and color.\r\n   *\r\n   * @param {Float32Array} verteces the verteces data\r\n   * @param {Uint16Array} indices the elements data\r\n   * @param {number} vertexSize the size of a vertex\r\n   * @param {Mat4} mat the transformation data\r\n   * @param {number} numLines the lines count\r\n   * @param {Vec4} color the color to use when drawing lines\r\n   */\r\n  static drawLines(verteces, indices, vertexSize, mat, numLines, color) {\r\n    // Buffers setup\r\n    Debug.#gl.bindBuffer(Debug.#gl.ARRAY_BUFFER, Debug.#arrayBuffer);\r\n    Debug.#gl.bufferData(Debug.#gl.ARRAY_BUFFER, verteces, Debug.#gl.DYNAMIC_DRAW);\r\n    Debug.#gl.bindBuffer(Debug.#gl.ELEMENT_ARRAY_BUFFER, Debug.#indexBuffer);\r\n    Debug.#gl.bufferData(Debug.#gl.ELEMENT_ARRAY_BUFFER, indices, Debug.#gl.DYNAMIC_DRAW);\r\n    Debug.#gl.enableVertexAttribArray(0);\r\n    Debug.#gl.vertexAttribPointer(0, 3, Debug.#gl.FLOAT, false, 4 * vertexSize,  0);\r\n    \r\n    // Program setup\r\n    Debug.#linesProgram.use();\r\n    Debug.#linesProgram.uMatrix.update(mat.values);\r\n    Debug.#linesProgram.uLineColor.update(color.values);\r\n\r\n    // Draw\r\n    Debug.#gl.drawElements(Debug.#gl.LINES, numLines * 2, Debug.#gl.UNSIGNED_SHORT, 0);\r\n    \r\n    // End draw\r\n    Debug.#gl.disableVertexAttribArray(0);\r\n    _all_js__WEBPACK_IMPORTED_MODULE_0__.Program.unbind(Debug.#gl);\r\n    Debug.#gl.bindBuffer(Debug.#gl.ARRAY_BUFFER, null);\r\n    Debug.#gl.bindBuffer(Debug.#gl.ELEMENT_ARRAY_BUFFER, null);\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack:///../../lib/webgl/debug.js?");

/***/ }),

/***/ "../../lib/webgl/program.js":
/*!**********************************!*\
  !*** ../../lib/webgl/program.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Program\": () => (/* binding */ Program)\n/* harmony export */ });\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n/**\r\n * @class Program representing an OpenGL program\r\n */\r\nclass Program {\r\n  #gl;\r\n  \r\n  /**\r\n   * Creates an instance of a Program.\r\n   *\r\n   * @param {WebGLRenderingContext} gl the WebGL context\r\n   */\r\n  constructor(gl) {\r\n    this.#gl = gl;\r\n    this.id = gl.createProgram();\r\n    this.attrs = [];\r\n  }\r\n\r\n  /**\r\n   * Attach a shader to the Program.\r\n   *\r\n   * @param {Shader} shader the shader to attach\r\n   */\r\n  attachShader(shader) {\r\n    this.#gl.attachShader(this.id, shader.id);\r\n  }\r\n\r\n  /**\r\n   * Link the Program. [once]\r\n   */\r\n  link() {\r\n    this.#gl.linkProgram(this.id);\r\n  }\r\n\r\n  /**\r\n   * Use the Program.\r\n   */\r\n  use() {\r\n    this.#gl.useProgram(this.id);\r\n  }\r\n\r\n  /**\r\n   * Unbind program.\r\n   */\r\n  static unbind(gl) {\r\n    gl.useProgram(null);\r\n  }\r\n\r\n  /**\r\n   * Bind attributes inside the Program. [once]\r\n   *\r\n   * @param {list of (string, number, enum, number, number)} attrs the attributes list\r\n   */\r\n  attributes(attrs) {\r\n    this.attrs = attrs;\r\n    attrs.forEach(([name, _, __, ___, ____], ind) => {\r\n      this.#gl.bindAttribLocation(this.id, ind, name);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enable all the attributes arrays and initialize their pointers data.\r\n   */\r\n  enableAttributes() {\r\n    this.attrs.forEach(([_, count, type, size, offset], ind) => {\r\n      this.#gl.enableVertexAttribArray(ind);\r\n      this.#gl.vertexAttribPointer(ind, count, type, false, size, offset);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Disable all the attributes arrays.\r\n   */\r\n  disableAttributes() {\r\n    this.attrs.forEach((_, ind) => {\r\n      this.#gl.disableVertexAttribArray(ind);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Declare that a uniform exist. [once]\r\n   *\r\n   * @param {string} name the name of the uniform\r\n   * @param {string} type the type of the uniform\r\n   *\r\n   * @return {object} a reference to the uniform obj\r\n   */\r\n  declareUniform(name, type) {\r\n    const method = (id, value) => this[\"uniform\" + type](id, value);\r\n    const id = this.#gl.getUniformLocation(this.id, name);\r\n    this[name] = { update: (value) => method(id, value), id };\r\n    return this[name];\r\n  }\r\n\r\n  /**\r\n   * Declare a list of uniform. [once]\r\n   *\r\n   * @param {list of (string, string)} uniforms the uniform list\r\n   */\r\n  declareUniforms(uniforms) {\r\n    uniforms.forEach(([name, type]) => {\r\n      this.declareUniform(name, type);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set uniform value for the Program.\r\n   * The Program must be in use.\r\n   *\r\n   * @param {number} id the uniform location\r\n   * @param {?} value the uniform value\r\n   */\r\n  uniform1f(id, value) { this.#gl.uniform1f(id, value); }\r\n  uniform1i(id, value) { this.#gl.uniform1i(id, value); }\r\n  uniform2iv(id, value) { this.#gl.uniform2iv(id, value); }\r\n  uniform2fv(id, value) { this.#gl.uniform2fv(id, value); }\r\n  uniform3iv(id, value) { this.#gl.uniform3iv(id, value); }\r\n  uniform3fv(id, value) { this.#gl.uniform3fv(id, value); }\r\n  uniform4iv(id, value) { this.#gl.uniform4iv(id, value); }\r\n  uniform4fv(id, value) { this.#gl.uniform4fv(id, value); }\r\n  uniformMatrix2fv(id, value) { this.#gl.uniformMatrix2fv(id, false, value); }\r\n  uniformMatrix3fv(id, value) { this.#gl.uniformMatrix3fv(id, false, value); }\r\n  uniformMatrix4fv(id, value) { this.#gl.uniformMatrix4fv(id, false, value); }\r\n}\r\n\n\n//# sourceURL=webpack:///../../lib/webgl/program.js?");

/***/ }),

/***/ "../../lib/webgl/shader.js":
/*!*********************************!*\
  !*** ../../lib/webgl/shader.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Shader\": () => (/* binding */ Shader)\n/* harmony export */ });\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n/**\r\n * @class Shader representing an OpenGL shader\r\n */\r\nclass Shader {\r\n  #gl;\r\n  \r\n  /**\r\n   * Creates an instance of a Shader.\r\n   *\r\n   * @param {WebGLRenderingContext} gl the WebGL context\r\n   * @param {gl.ENUM_TYPE} type the Shader type\r\n   * @param {string} src the Shader source\r\n   */\r\n  constructor(gl, type, src) {\r\n    this.#gl = gl;\r\n    this.id = null;\r\n    this.src = src;\r\n    this.type = type;\r\n    this.#compileShader();\r\n  }\r\n\r\n  /**\r\n   * Compiles the Shader.\r\n   *\r\n   * @param {WebGLRenderingContext} gl the WebGL context\r\n   * @param {gl.ENUM_TYPE} type the Shader type\r\n   * @param {string} src the Shader source\r\n   *\r\n   * @throws an Error when the Shader does not compile successfully\r\n   */\r\n  #compileShader() {\r\n    // Create shader object\r\n    const shader = this.#gl.createShader(this.type);\r\n\r\n    // Set source code\r\n    this.#gl.shaderSource(shader, this.src);\r\n  \r\n    // Compile shader\r\n    this.#gl.compileShader(shader);\r\n\r\n    // Check compilation results\r\n    const status = this.#gl.getShaderParameter(shader, this.#gl.COMPILE_STATUS);\r\n    const log    = this.#gl.getShaderInfoLog(shader);\r\n\r\n    // Validate shader\r\n    if (status === this.#gl.GL_FALSE || log != \"\") throw new Error(\"{SHADER-ERROR}: \" + log);\r\n  \r\n    // Result\r\n    this.id = shader;\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack:///../../lib/webgl/shader.js?");

/***/ }),

/***/ "../../lib/webgl/texture.js":
/*!**********************************!*\
  !*** ../../lib/webgl/texture.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Texture\": () => (/* binding */ Texture)\n/* harmony export */ });\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n/**\r\n * @class Texture representing an OpenGL shader\r\n */\r\nclass Texture {\r\n  #gl;\r\n  \r\n  /**\r\n   * Creates an instance of a Texture.\r\n   */\r\n  constructor(gl, id, image) {\r\n    this.#gl = gl;\r\n    this.id = id;\r\n    this.image = image;\r\n    this.level = 0;\r\n    this.internalFormat = gl.RGBA;\r\n    this.srcFormat = gl.RGBA;\r\n    this.srcType = gl.UNSIGNED_BYTE;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  load() {\r\n    this.#gl.bindTexture(this.#gl.TEXTURE_2D, this.id);\r\n    this.#gl.texImage2D(\r\n      this.#gl.TEXTURE_2D,\r\n      this.level,\r\n      this.internalFormat,\r\n      this.srcFormat,\r\n      this.srcType,\r\n      this.image\r\n    );\r\n    this.#gl.bindTexture(this.#gl.TEXTURE_2D, null);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  bind() {\r\n    this.#gl.activeTexture(this.#gl.TEXTURE0);\r\n    this.#gl.bindTexture(this.#gl.TEXTURE_2D, this.id);\r\n    this.#gl.texParameteri(this.#gl.TEXTURE_2D, this.#gl.TEXTURE_WRAP_S, this.#gl.REPEAT);\r\n    this.#gl.texParameteri(this.#gl.TEXTURE_2D, this.#gl.TEXTURE_WRAP_T, this.#gl.REPEAT);\r\n    this.#gl.texParameteri(this.#gl.TEXTURE_2D, this.#gl.TEXTURE_MIN_FILTER, this.#gl.LINEAR);\r\n    \r\n  this.#gl.texParameteri(this.#gl.TEXTURE_2D, this.#gl.TEXTURE_MAG_FILTER, this.#gl.LINEAR);\r\n    this.#gl.generateMipmap(this.#gl.TEXTURE_2D);\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of a Texture from an url.\r\n   *\r\n   * @param {string} url the url to download the texture from\r\n   *\r\n   * @return {Promise<Texture>} a promise with the texture\r\n   */\r\n  static fromUrl(gl, url) {\r\n    return new Promise((res, rej) => {\r\n      const image = new Image();\r\n      image.onload = () => {\r\n        const texture = gl.createTexture();\r\n        res(new Texture(gl, texture, image));\r\n      };\r\n      image.onerror = (event) => {\r\n        rej(\"Error loading the image.\");\r\n      };\r\n      image.crossOrigin = '';\r\n      image.src = url;\r\n    });\r\n  }\r\n}\n\n//# sourceURL=webpack:///../../lib/webgl/texture.js?");

/***/ }),

/***/ "../../lib/webgl/utils.js":
/*!********************************!*\
  !*** ../../lib/webgl/utils.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RetrieveWebGLContext\": () => (/* binding */ RetrieveWebGLContext),\n/* harmony export */   \"SetKeyboardListener\": () => (/* binding */ SetKeyboardListener),\n/* harmony export */   \"SetOnClickHandler\": () => (/* binding */ SetOnClickHandler)\n/* harmony export */ });\n/* harmony import */ var _all_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../all.js */ \"../../lib/all.js\");\n/** @author: Davide Risaliti davdag24@gmail.com */\r\n\r\n\r\n\r\n/**\r\n * Retrieve OpenGL ES context.\r\n * \r\n * @params {string} elementId the id of the canvas element to use\r\n *\r\n * @throws an Error when the Context cannot be retrieved\r\n * \r\n * @return {WebGLRenderingContext} the retrieved context\r\n */\r\nfunction RetrieveWebGLContext(elementId) {\r\n  // Find element\r\n  const canvas = document.getElementById(elementId);\r\n\r\n  // Check for errors\r\n  if (canvas == null) throw new Error(\"Invalid element id\");\r\n\r\n  // Initialize the GL context\r\n  const gl = canvas.getContext(\"webgl\");\r\n\r\n  // Check for errors\r\n  if (gl == null) throw new Error(\"WebGL is not supported\");\r\n\r\n  // Insert canvas ref into gl context\r\n  gl.canvasEl = canvas;\r\n\r\n  // Result\r\n  return gl;\r\n}\r\n\r\n/**\r\n * Add an handler for common pointer operations and compute the position mapping process.\r\n * \r\n * @params {string} elementId the id of the canvas element to use\r\n * \r\n * @params {object} handler an object that implements the callbacks\r\n */\r\nfunction SetOnClickHandler(elementId, handler) {\r\n  // Find element\r\n  const canvas = document.getElementById(elementId);\r\n\r\n  // Helper function to compute position\r\n  function getPosition(el) {\r\n    var xPosition = 0;\r\n    var yPosition = 0;\r\n    while (el) {\r\n      xPosition += (el.offsetLeft - el.scrollLeft + el.clientLeft);\r\n      yPosition += (el.offsetTop  - el.scrollTop  + el.clientTop);\r\n      el = el.offsetParent;\r\n    }    \r\n    return new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec2(xPosition, yPosition);\r\n  }\r\n\r\n  // Store position\r\n  const canvasPos = getPosition(canvas);\r\n\r\n  // Lambda to help readability\r\n  const mousePos = (event) => new _all_js__WEBPACK_IMPORTED_MODULE_0__.Vec2(event.clientX, event.clientY).sub(canvasPos);\r\n\r\n  // Register to events\r\n  canvas.addEventListener(\"mousedown\", (event) => handler.onMouseDown(event, mousePos(event)));\r\n  canvas.addEventListener(\"mousemove\", (event) => handler.onMouseMove(event, mousePos(event)));\r\n  canvas.addEventListener(\"mouseup\", (event) => handler.onMouseUp(event, mousePos(event)));\r\n  canvas.addEventListener(\"wheel\", (event) => handler.onMouseWheel(event, mousePos(event)));\r\n  canvas.addEventListener(\"mouseleave\", (event) => handler.onMouseOut(event));\r\n}\r\n\r\n/**\r\n * Add an handler for common keyobard events.\r\n * \r\n * @params {string} elementId the id of the canvas element to use\r\n * \r\n * @params {object} handler an object that implements the callbacks\r\n * \r\n */\r\nfunction SetKeyboardListener(elementId, handler) {\r\n  // Find element\r\n  const canvas = document.getElementById(elementId);\r\n\r\n  // Register to events\r\n  document.addEventListener(\"keydown\", handler.OnKeyDown);\r\n  document.addEventListener(\"keyup\", handler.OnKeyUp);\r\n}\r\n\n\n//# sourceURL=webpack:///../../lib/webgl/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;